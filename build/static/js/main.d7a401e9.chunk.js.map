{"version":3,"sources":["core/Keyboard.ts","core/CharacterSet.ts","utils/course-utils.ts","utils/text-utils.ts","core/TrainingStringGenerator/CharacterInserter.ts","core/TrainingStringGenerator/MarkovChain.ts","core/TrainingStringGenerator/WordModifiers.ts","core/TrainingStringGenerator/TrainingStringGenerator.ts","assets/themes.ts","core/TrainingText.ts","assets/courses/Courses.ts","assets/languages/english/English.ts","core/Language.ts","assets/keyboard_layouts/en_qwerty.ts","components/defaultState.ts","components/FormattedText/FormattedText.tsx","components/VirtualKeyboard/VirtualKeyboard.tsx","components/Modals/ModeSelectorModal/ModeSelectorModal.tsx","components/Modals/SettingsModal/SettingsModal.tsx","components/TextDisplay/TextDisplay.tsx","components/Toolbar/FontSizeToggle.tsx","components/Toolbar/QuickStats.tsx","components/Toolbar/Toolbar.tsx","components/TypeTrainer.tsx","utils/Timer.ts","utils/utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Hand","Finger","CharacterSet","_characters","_letterSet","_numberSet","_punctSet","_specialSet","this","ofType","t","filter","type","glyph","toLowerCase","ch","code","bracketPair","arr","character","includes","cs","reduce","uniqueGlyphs","length","concat","Keyboard","_labelMap","_layout","_keyCodeLayout","_fingerMap","NONE","hand","ANY","finger","Backquote","LEFT","PINKY","Digit1","Digit2","RING","Digit3","MIDDLE","Digit4","INDEX","Digit5","Digit6","Digit7","RIGHT","Digit8","Digit9","Digit0","Minus","Equal","Backspace","Tab","KeyQ","KeyW","KeyE","KeyR","KeyT","KeyY","KeyU","KeyI","KeyO","KeyP","BracketLeft","BracketRight","Backslash","CapsLock","KeyA","KeyS","KeyD","KeyF","KeyG","KeyH","KeyJ","KeyK","KeyL","Semicolon","Quote","Enter","ShiftLeft","KeyZ","KeyX","KeyC","KeyV","KeyB","KeyN","KeyM","Comma","Period","Slash","ShiftRight","ControlLeft","AltLeft","Space","THUMB","AltRight","ControlRight","parseLayout","keyboard","entries","idx","rowCodes","col","label","fingerHand","keyCode","slice","charsAtCourseLevel","charSet","level","filteredCodes","codesAtCourseLevel","characters","every","c","specifiesRows","keyBoardRows","specifiesHand","specifiesFingers","fingers","keyCodes","uniqueKeyCodes","push","codes","row","keyCodeLayout","fingerMap","basicSanitize","str","sanitized","replace","sanitizeCode","String","raw","match","p1","offset","string","PrependCharacterInserter","behavior","AppendCharacterInserter","PrependOrAppendCharacterInserter","Math","random","BracketCharacterInserter","SplitCharacterInserter","vowels","isVowel","char","splitIndices","i","splitIndex","floor","OperatorCharacterInserter","CharacterInserter","inserter","apply","MarkovChain","order","words","duplicates","start","children","neighbors","init","map","word","addToDuplicatesTrie","previous","key","substr","newNode","currentNode","childNode","repeat","min","max","allowDuplicates","maxAttempts","attempts","nextNodeIndex","isDuplicate","Error","randomEle","NumsWordModifier","numberSet","PunctWordModifier","punctSet","SpecialWordModifier","specialSet","GuidedModeStringGenerator","_keyboard","_language","_courseLevels","newWordModifier","guidedHasCaps","guidedHasNumbers","guidedHasPunctuation","guidedHasSpecials","modifiers","toUpperCase","characterSet","mod","options","newUnmodifiedWords","modifier","join","newWord","guidedLevelIndex","guidedWordLengthMin","guidedWordLengthMax","guidedNumWords","alphaMap","alphaMapAtLevel","letters","alphabet","vowel","letter","chain","newMarkovChain","generate","randomWordFrom","l","abs","console","log","byAlphaMap","split","some","filteredDict","dictionary","lvl","lvlMap","glyphs","charsAtLevel","PracticeModeStringGenerator","language","_sourceText","_textCursor","_sentenceCursor","_sentences","parseSentences","sentence","sentences","wasFound","cursor","cursorAt","isValid","index","startIdx","isLetter","isPeriodMark","brackets","isBracketMark","wantedBrackets","isWantedBracket","wanted","isEndOfSentence","next","isNewLine","sentenceHasPeriod","endReached","isApostrophe","prev","splice","findIndex","find","endIdx","CodeModeStringGenerator","_code","codeLines","_cursor","lines","end","indexOf","line","themes","light","color","dark","TrainingText","_raw","_sanitized","chars","includedCharMap","whiteSpaceSanitize","resultStr","ltr","sanitizeStringForGlyphs","Courses","guidedCourse","name","description","levels","English","numbers","punctuation","specials","letterSet","forEach","EnglishQwertyLayout","main","shift","TrainingMode","FontSizes","CodeLanguage","defaultLayout","qwerty","defaultLanguage","defaultText","defaultMode","PRACTICE","defaultGenerator","text","defaultCourse","defaultCodeSourceText","defaultState","machineState","trainingMode","trainingStringGenerator","currentActiveKeyCodes","currentUserPressedKeys","Set","trainingString","mistakeCharIndices","wordsPerMinute","successRate","totalSessions","wordsPerMinuteAverage","successRateAverage","uiModeSelectShow","uiSettingsModalShow","uiShowWhiteSpaceSymbols","uiTheme","trainingStringFontSize","guidedCourseLevels","guidedLikelihoodModified","practiceSourceText","codeSourceText","testId","FormattedText","props","uniquekey","format","newStr","replaceWhiteSpacesWithSymbols","unsafe","document","createTextNode","p","createElement","appendChild","safe","innerHTML","remove","escapeHtml","replaceWhiteSpacesWithHTML","tag","className","retStr","dangerouslySetInnerHTML","__html","v","data-testid","role","aria-label","current","before","after","e","has","setTimeout","typo","getElementsByClassName","greyed","style","textAlign","VirtualKeyboard","useState","visible","setVisible","id","Form","inline","marginLeft","FormCheck","onChange","checked","marginRight","layout","rowIdx","keyBtn","classes","pressed","size","active","currentKey","labelHtml","keyCapLabel","Object","keys","opt","generateLabelHtml","ModeSelectorModal","Modal","aria-labelledby","centered","Header","closeButton","Title","Body","Button","block","onClick","settrainingmode","GUIDED","onHide","CODE","SettingsModal","draftSettings","setDraftSettings","handleChange","prop","value","form","mode","target","htmlFor","width","height","show","Footer","settings","onSubmitChanges","TextDisplay","FontSizeToggle","toggleFn","icon","bxFontSize","Wrapper","styled","div","BigStat","h1","SmallStack","SmallStackLabel","Avg","small","QuickStats","display","flexDirection","overflow","fontSize","userSelect","fontFamily","changeLevel","Toolbar","stats","buttons","TypeTrainer","sessionTimer","paused","pauseMark","startMark","Date","now","pausedLength","pause","unPause","getTimeElapsed","Timer","inactivityTimer","localStorage","undefined","state","initWith","table","routeEvent","bind","addEventListener","prepareNewSession","removeEventListener","event","handleKeyDown","resetInactivityTimer","unPauseSession","handleKeyUp","pauseSession","localState","storage","window","x","setItem","removeItem","DOMException","localStorageAvailable","propName","storageItem","getItem","decodeStorageItem","encoded","encodeStorageItem","JSON","stringify","item","delimiter","SyntaxError","parseInt","parseFloat","parse","Event","clearTimeout","startInactivityTimer","preventDefault","shouldKeepKeyDownEvent","add","keyCodeisCharKey","isCorrectCharPressed","goToNextChar","isEOF","endSession","setState","startSession","setLocalStorage","delete","info","logMachineState","newState","draftState","newStringGenerator","getCurrentActiveKeyCodes","round","nextLevelIndex","currentLvl","minutes","generator","mapGlyphToKeyCode","kc","theme","setModeModalShow","setTrainingMode","setSettingsModalShow","applyUserSettings","Container","fluid","levelDescription","getCurrentLevel","setNewLevel","ButtonGroup","toggleFontSize","toggleWhiteSpaceSymbols","toggleTheme","React","Component","App","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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AAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD,KAAM,mBAAoBkI,SAAU,UAClE,CAAE9H,KAAM,CAAC,QAASH,MAAO,IAAKD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","file":"static/js/main.d7a401e9.chunk.js","sourcesContent":["import { KeyCode } from \"./KeyCode\"\n\n//\n// Virtual Keyboard\n//\n\nexport type KeyCapLabel = { main: string; shift?: string; opt?: string }\nexport type KeyCapLabelMap = { [code in KeyCode]: KeyCapLabel }\n\n\n//\n// Physiological Types\n//\nexport enum Hand {\n  ANY = 'any',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\nexport enum Finger {\n  ANY = \"any\",\n  THUMB = \"thumb\",\n  INDEX = \"index\",\n  MIDDLE = \"middle\",\n  RING = \"ring\",\n  PINKY = \"pinky\",\n}\n\n\nexport type KeyCap = {\n  code: KeyCode\n  label: KeyCapLabel\n  fingerHand: { hand: Hand; finger: Finger }\n}\n\nexport default class Keyboard {\n  private _layout: KeyCap[][]\n  constructor(private _labelMap: KeyCapLabelMap) {\n    this._layout = this.parseLayout(_labelMap)\n  }\n\n  private parseLayout(_labelMap: KeyCapLabelMap) {\n    const keyboard: KeyCap[][] = []\n    for (const [idx, rowCodes] of this._keyCodeLayout.entries()) {\n      keyboard[idx] = []\n      for (const [col, code] of rowCodes.entries()) {\n        keyboard[idx][col] = {\n          code: code as KeyCode,\n          label: _labelMap[code as KeyCode],\n          fingerHand: this._fingerMap[code as KeyCode],\n        }\n      }\n    }\n   return keyboard\n  }\n\n  get layout(): KeyCap[][] {\n    return this._layout\n  }\n  /*\n  get labelMap(): KeyCapLabelMap {\n    return this._labelMap\n  }\n  */\n  get keyCodeLayout(): KeyCode[][] {\n    return this._keyCodeLayout\n  }\n  \n  get fingerMap(): { [key in KeyCode]: { hand: Hand, finger: Finger }} {\n    return this._fingerMap\n  } \n  \n  static keyCodeisCharKey(keyCode: string): boolean {\n  if (keyCode.slice(0, 3) === \"Key\")\n    return true;\n  if (keyCode.slice(0, 5) === \"Digit\")\n    return true;\n  switch (keyCode) {\n    case \"Space\":\n    case \"Backquote\":\n    case \"Minus\":\n    case \"Equal\":\n    case \"BracketLeft\":\n    case \"BracketRight\":\n    case \"Backslash\":\n    case \"Semicolon\":\n    case \"Quote\":\n    case \"Comma\":\n    case \"Period\":\n    case \"Slash\":\n    case 'Enter':\n    case 'Tab':\n      return true;\n    default:\n      return false;\n  }\n}\n  protected readonly _keyCodeLayout: KeyCode[][] = [\n    ['Backquote','Digit1','Digit2','Digit3','Digit4','Digit5','Digit6','Digit7','Digit8','Digit9','Digit0','Minus','Equal','Backspace'],\n    ['Tab','KeyQ','KeyW','KeyE','KeyR','KeyT','KeyY','KeyU','KeyI','KeyO','KeyP','BracketLeft','BracketRight','Backslash'],\n    ['CapsLock','KeyA','KeyS','KeyD','KeyF','KeyG','KeyH','KeyJ','KeyK','KeyL','Semicolon','Quote','Enter'],\n    ['ShiftLeft','KeyZ','KeyX','KeyC','KeyV','KeyB','KeyN','KeyM','Comma','Period','Slash','ShiftRight'],\n    ['ControlLeft','AltLeft','Space','AltRight','ControlRight']\n  ]\n  protected readonly _fingerMap: { [key in KeyCode]: { hand: Hand, finger: Finger }} = {\n    NONE: { hand: Hand.ANY, finger: Finger.ANY },\n    Backquote: { hand: Hand.LEFT, finger: Finger.PINKY },\n    Digit1: { hand: Hand.LEFT, finger: Finger.PINKY },\n    Digit2: { hand: Hand.LEFT, finger: Finger.RING },\n    Digit3: { hand: Hand.LEFT, finger: Finger.MIDDLE },\n    Digit4: { hand: Hand.LEFT, finger: Finger.INDEX },\n    Digit5: { hand: Hand.LEFT, finger: Finger.INDEX },\n    Digit6: { hand: Hand.LEFT, finger: Finger.INDEX },\n    Digit7: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    Digit8: { hand: Hand.RIGHT, finger: Finger.MIDDLE },\n    Digit9: { hand: Hand.RIGHT, finger: Finger.RING },\n    Digit0: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Minus: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Equal: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Backspace: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Tab: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyQ: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyW: { hand: Hand.LEFT, finger: Finger.RING },\n    KeyE: { hand: Hand.LEFT, finger: Finger.MIDDLE },\n    KeyR: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyT: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyY: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    KeyU: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    KeyI: { hand: Hand.RIGHT, finger: Finger.MIDDLE },\n    KeyO: { hand: Hand.RIGHT, finger: Finger.RING },\n    KeyP: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    BracketLeft: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    BracketRight: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Backslash: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    CapsLock: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyA: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyS: { hand: Hand.LEFT, finger: Finger.RING },\n    KeyD: { hand: Hand.LEFT, finger: Finger.MIDDLE },\n    KeyF: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyG: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyH: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    KeyJ: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    KeyK: { hand: Hand.RIGHT, finger: Finger.MIDDLE },\n    KeyL: { hand: Hand.RIGHT, finger: Finger.RING },\n    Semicolon: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Quote: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    Enter: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    ShiftLeft: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyZ: { hand: Hand.LEFT, finger: Finger.PINKY },\n    KeyX: { hand: Hand.LEFT, finger: Finger.RING },\n    KeyC: { hand: Hand.LEFT, finger: Finger.MIDDLE },\n    KeyV: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyB: { hand: Hand.LEFT, finger: Finger.INDEX },\n    KeyN: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    KeyM: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    Comma: { hand: Hand.RIGHT, finger: Finger.MIDDLE },\n    Period: { hand: Hand.RIGHT, finger: Finger.RING },\n    Slash: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    ShiftRight: { hand: Hand.RIGHT, finger: Finger.PINKY },\n    ControlLeft: { hand: Hand.LEFT, finger: Finger.PINKY },\n    AltLeft: { hand: Hand.LEFT, finger: Finger.MIDDLE },\n    Space: { hand: Hand.ANY, finger: Finger.THUMB },\n    AltRight: { hand: Hand.RIGHT, finger: Finger.INDEX },\n    ControlRight: { hand: Hand.RIGHT, finger: Finger.RING }\n  }\n}\n\n","import { KeyCode } from \"./KeyCode\"\n\nexport type CharacterType = \"NONE\" | \"LOWERCASE_LETTER\" | \"NUMBER\" | \"PUNCTUATION\" | \"SPECIAL\" | \"PROGRAMMING\" | \"WHITESPACE\"\n\nexport type CharacterBehavior = \"NONE\" | \"PREPEND\" | \"APPEND\" | \"PREPEND_OR_APPEND\" | \"SPLIT\" | \"BRACKET\" | \"OPERATOR\"\n\nexport type Character = {\n  code: KeyCode[]\n  glyph: string\n  bracketPair?: string\n  type: CharacterType\n  behavior: CharacterBehavior\n}\n\nexport default class CharacterSet {\n  private _letterSet: Character[]\n  private _numberSet: Character[]\n  private _punctSet: Character[]\n  private _specialSet: Character[]\n  constructor(private _characters: Character[]) {\n    this._letterSet = this.ofType('LOWERCASE_LETTER')\n    this._numberSet = this.ofType('NUMBER')\n    this._punctSet  = this.ofType(\"PUNCTUATION\")\n    this._specialSet = this.ofType(\"SPECIAL\")\n  }\n  get characters() {\n    return this._characters\n  }\n  get letterSet() {\n    return this._letterSet\n  }\n  get numberSet() {\n    return this._numberSet\n  }\n  get punctSet() {\n    return this._punctSet\n  }\n  get specialSet() {\n    return this._specialSet\n  }\n  ofType(t: CharacterType): Character[] {\n    return this._characters.filter(({type}) => t === type)\n  }\n  static uniqueGlyphs(cs: Character[]): string[] {\n    return cs.reduce((uniqueGlyphs: string[], { glyph, bracketPair }) => {\n      if (uniqueGlyphs.includes(glyph) || glyph.length > 1) return uniqueGlyphs\n      uniqueGlyphs = uniqueGlyphs.concat(glyph)\n      if (bracketPair == null || uniqueGlyphs.includes(bracketPair)) return uniqueGlyphs\n      return uniqueGlyphs.concat(bracketPair)\n    }, [])\n  }\n\n  static uniqueKeyCodes(cs: Character[]): KeyCode[] {\n    return cs.reduce((arr: KeyCode[], character) => {\n      for (const code of character.code) {\n        if (!arr.includes(code)) {\n          arr = arr.concat(code)\n        }\n      }\n      return arr\n    }, [])\n  }\n\n  mapGlyphToKeyCode(glyph: string): KeyCode {\n    if (glyph == null) return \"NONE\"\n    glyph = glyph.toLowerCase()\n    for (const ch of this._characters) {\n      if (glyph === ch.glyph) return ch.code[0]\n      if (ch.bracketPair != null && glyph === ch.bracketPair) return ch.code[1]\n    }\n    return 'NONE'\n  }\n\n  filterByCode(code: KeyCode): Character[] {\n    const arr = this._characters.filter(character => character.code.includes(code))\n    if (arr == null) return []\n    return arr\n  }\n}\n","import { CourseLevel } from \"../assets/courses/Courses\";\nimport CharacterSet, { Character } from \"../core/CharacterSet\";\nimport Keyboard, { Hand, Finger } from \"../core/Keyboard\";\nimport { KeyCode } from \"../core/KeyCode\";\n\nexport const charsAtCourseLevel = (charSet: CharacterSet, level: CourseLevel, keyboard: Keyboard): Character[] => {\n\n  const filteredCodes = codesAtCourseLevel(charSet, level, keyboard)\n  \n  return charSet.characters.filter(({code}) => code.every(c => filteredCodes.includes(c)))\n    \n}\n\nexport const codesAtCourseLevel = (charSet: CharacterSet, level: CourseLevel, keyboard: Keyboard): KeyCode[] => {\n  const specifiesRows = level.keyBoardRows != null;\n  const specifiesHand = level.hand != null;\n  const specifiesFingers = level.fingers != null && level.fingers.length > 0;\n  const keyCodes = CharacterSet.uniqueKeyCodes(charSet.characters);\n  \n  if (!specifiesRows && !specifiesHand && !specifiesFingers) return keyCodes\n\n  const rowCodes: KeyCode[] = []\n  if (specifiesRows) {\n    rowCodes.push(...level.keyBoardRows.reduce((codes: KeyCode[], row) => codes.concat(keyboard.keyCodeLayout[row]), []))\n  }\n  return keyCodes.filter(code => {\n    if (specifiesRows) {\n      const codeIntersectsRows = rowCodes.includes(code);\n      // filter out rows\n      if (!codeIntersectsRows) return false;\n    }\n    if (specifiesHand) {\n      // filter out hand\n      const codeIntersectsHand = level.hand === keyboard.fingerMap[code].hand || keyboard.fingerMap[code].hand === Hand.ANY || level.hand === Hand.ANY\n      if (!codeIntersectsHand) return false;\n    }\n    // filter out finger\n    if (specifiesFingers) {\n      const codeIntersectsFinger = level.fingers?.[0] === Finger.ANY ||\n        level.fingers?.includes(keyboard.fingerMap[code].finger);\n      if (!codeIntersectsFinger) return false;\n    }\n    return true\n  })\n}","const basicSanitize = (str: string): string => {\n  let sanitized = str\n  // if (/\\S/.test(str)) str.trim()\n  sanitized = sanitized.replace(/\\r/g, \"\\n\") // (unescaped) Carriage Return to Line Feed\n  sanitized = sanitized.replace(/[’‚]/g, \"'\") // Curly single-quote to standard\n  sanitized = sanitized.replace(/[“”„]/g, '\"') // Curly double-quotes to standard\n  sanitized = sanitized.replace(/…/g, \"...\") // Ellipsis to three periods\n  return sanitized\n}\n\nconst whiteSpaceSanitize = (str: string) => {\n  let sanitized = str\n  sanitized = sanitized.replace(/\\t/g, \" \") // Tabs\n  sanitized = sanitized.replace(/(\\n\\s*){3,}/g, \"\\n\\n\") // Multi returns to double\n  sanitized = sanitized.replace(/  +/g, \" \") // Multi space\n  return sanitized\n}\nexport function sanitizeStringForGlyphs(str: string | undefined, chars?: string[]): string {\n  if (str == null) return \"\"\n  if (chars == null) return str\n\n  const includedCharMap: { [char: string]: boolean } = {\n    \" \": true,\n  }\n  \n  for (const char of chars) {\n    if (!includedCharMap[char]) {\n      includedCharMap[char] = true\n      includedCharMap[char.toUpperCase()] = true\n    }\n  }\n  \n  let sanitized = whiteSpaceSanitize(basicSanitize(str))\n  \n  let resultStr = \"\"\n  for (const ltr of sanitized) {\n    if (includedCharMap[ltr]) {\n      resultStr += ltr\n    }\n  }\n\n  return resultStr\n}\nexport function sanitizeCode(str: string): string {\n  let sanitized = String.raw`${str}`\n  sanitized = basicSanitize(sanitized)\n  function tabs(match: string, p1: string, offset: number, string: string) {\n    return '\\n'+p1.replace(/ {2}/g, '\\t')\n  }\n  sanitized = sanitized.replace(/\\n([ {2}]+)/g, tabs)\n  return String.raw`${sanitized}`\n}\n","import { Character } from \"../CharacterSet\"\n\nexport interface ICharacterInserter {\n  apply(str: string, character: Character): string\n}\n\n\nexport class PrependCharacterInserter implements ICharacterInserter {\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'PREPEND') return str\n    return character.glyph + str\n  }\n}\n\nexport class AppendCharacterInserter\n implements ICharacterInserter {\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'APPEND') return str\n    return str + character.glyph\n  }\n}\n\nexport class PrependOrAppendCharacterInserter\n implements ICharacterInserter {\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'PREPEND_OR_APPEND') return str\n    return Math.random() < 0.5 ? character.glyph + str : str + character.glyph\n  }\n}\n\nexport class BracketCharacterInserter\n implements ICharacterInserter {\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'BRACKET') return str\n    if (character.bracketPair != null) return character.glyph + str + character.bracketPair\n    return character.glyph + str + character.glyph\n  }\n}\n\nexport class SplitCharacterInserter  implements ICharacterInserter {\n  constructor(private vowels: string[]) {}\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'SPLIT') return str\n    if (str.length < 5) return str // ignore short strings\n    const isVowel = (char: string): boolean => this.vowels.includes(char)\n    // try to split somewhere after 2nd and before 2nd-to-last letters\n    // and not between two vowels\n    let splitIndices: number[] = []\n    for (let i = 2; i < str.length - 3; i++) {\n      if (!isVowel(str[i]) && !isVowel(str[i + 1])) {\n        splitIndices.push(i)\n      }\n    }\n    const noSplitFound = splitIndices.length === 0\n    if (noSplitFound) return str\n\n    const randomIndex = splitIndices.length > 1 ? splitIndices[Math.floor(Math.random() * splitIndices.length)] : splitIndices[0]\n    let splitIndex = randomIndex\n    \n    return str.slice(0, splitIndex) + character.glyph + str.slice(splitIndex)\n  }\n}\n\nexport class OperatorCharacterInserter\n implements ICharacterInserter {\n  apply(str: string, character: Character): string {\n    if (character.behavior !== 'OPERATOR') return str\n    return str + ' ' + character.glyph\n  }\n}\n\n\nexport default class CharacterInserter {\n  constructor(private vowels: string[]) {}\n  apply(str: string, character: Character): string {\n    let inserter\n    switch (character.behavior) {\n      case 'PREPEND':\n        inserter = new PrependCharacterInserter()\n        break\n      case 'APPEND':\n        inserter = new AppendCharacterInserter()\n        break\n      case 'PREPEND_OR_APPEND':\n        inserter = new PrependOrAppendCharacterInserter()\n        break\n      case 'BRACKET':\n        inserter = new BracketCharacterInserter()\n        break\n      case 'SPLIT':\n        inserter = new SplitCharacterInserter(this.vowels)\n        break\n      case 'OPERATOR':\n        inserter = new OperatorCharacterInserter()\n        break\n      default:\n        return str\n    }\n    return inserter.apply(str, character)\n  }\n}\n","/**\n@license Foswig.js | (c) Glenn Conner. | https://github.com/mrsharpoblunto/foswig.js/blob/master/LICENSE\n@format\n*/\n\ninterface MarkovNode {\n  character: string;\n  neighbors: Array<MarkovNode | null>;\n}\n\ninterface TrieNode {\n  children: {[key: string]: TrieNode};\n}\n\ntype RandomGenerator = () => number;\n\nexport default class MarkovChain {\n  private order: number;\n  private duplicates: TrieNode;\n  private start: MarkovNode;\n\n  /**\n   * order indicates how many previous characters to take into account when picking the next. A lower number represents more random words, whereas a higher number will result in words that match the input words more closely.\n   */\n  constructor(order: number, words: Array<string>) {\n    this.order = order;\n    this.duplicates = {children: {}};\n    this.start = {character: '', neighbors: []};\n    this.init(words);\n  }\n\n  private init(words: Array<string>): void {\n    const map: {[key: string]: MarkovNode} = {};\n    for (const word of words) {\n      this.addToDuplicatesTrie(word.toLowerCase());\n\n      let previous = this.start;\n      let key = '';\n      for (let i = 0; i < word.length; ++i) {\n        const ch = word[i];\n        key += ch;\n        if (key.length > this.order) {\n          key = key.substr(1);\n        }\n        let newNode = map[key];\n        if (!newNode) {\n          newNode = {character: ch, neighbors: []};\n          map[key] = newNode;\n        }\n\n        previous.neighbors.push(newNode);\n        previous = newNode;\n      }\n      //link to end node.\n      previous.neighbors.push(null);\n    }\n  }\n\n  /**\n   * Adds a word and all its substrings to a duplicates trie to\n   * ensure that generated words are never an exact match or substring\n   * of a word in the input dictionary. Building a trie allows us\n   * to efficiently search for these duplicates later without\n   * having to do O(N) comparision checks over the entire dictionary\n   */\n  private addToDuplicatesTrie(word: string): void {\n    if (word.length > 1) {\n      this.addToDuplicatesTrie(word.substr(1));\n    }\n\n    let currentNode = this.duplicates;\n    for (let i = 0; i < word.length; ++i) {\n      let childNode = currentNode.children[word[i]];\n      if (!childNode) {\n        childNode = {children: {}};\n        currentNode.children[word[i]] = childNode;\n      }\n      currentNode = childNode;\n    }\n  }\n\n  /**\n   * Check to see if a word is a match to any substring in the input\n   * dictionary in O(N) time, where N is the number of characters in the\n   * word rather than the number of words in the dictionary.\n   * @param {string} word The word we want to find out whether it is a\n   * duplicate of a substring in the input dictionary.\n   */\n  private isDuplicate(word: string): boolean {\n    word = word.toLowerCase();\n    let currentNode = this.duplicates;\n    for (let i = 0; i < word.length; ++i) {\n      const childNode = currentNode.children[word[i]];\n      if (!childNode) return false;\n      currentNode = childNode;\n    }\n    return true;\n  }\n\n  generate({\n    min = 0,\n    max = 0,\n    allowDuplicates = true,\n    maxAttempts = 25,\n    random = Math.random,\n  }: {\n    min?: number;\n    max?: number;\n    allowDuplicates?: boolean;\n    maxAttempts?: number;\n    random?: RandomGenerator;\n  }): string {\n    let word;\n    let repeat;\n    let attempts = 0;\n    do {\n      repeat = false;\n      let nextNodeIndex = Math.floor(random() * this.start.neighbors.length);\n      let currentNode = this.start.neighbors[nextNodeIndex];\n      word = '';\n\n      while (currentNode && (max <= 0 || word.length <= max)) {\n        word += currentNode.character;\n        nextNodeIndex = Math.floor(random() * currentNode.neighbors.length);\n        currentNode = currentNode.neighbors[nextNodeIndex];\n      }\n      if (\n        (max > 0 && word.length > max) ||\n        word.length < min\n      ) {\n        repeat = true;\n      }\n    } while (\n      // we don't want to output any exact replicas from the input dictionary\n      (repeat || (!allowDuplicates && this.isDuplicate(word))) &&\n      (maxAttempts <= 0 || ++attempts < maxAttempts)\n    );\n    if (maxAttempts > 0 && attempts >= maxAttempts) {\n      throw new Error(\n        'Unable to generate a word with the given parameters after ' +\n          attempts +\n          ' attempts',\n      );\n    }\n    return word;\n  }\n}\n","import CharacterSet, { Character } from \"../CharacterSet\"\nimport CharacterInserter from \"./CharacterInserter\"\n\nconst randomEle = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)]\n\nexport const CapsWordModifier = () => (word: string): string => {\n  return word.slice(0, 1).toUpperCase().concat(word.slice(1))\n}\n\nexport const NumsWordModifier = (numberSet: Character[]) => (word: string): string => {\n  if (numberSet.length === 0) return word\n  return word + randomEle(numberSet).glyph\n}\n\nexport const PunctWordModifier = (punctSet: Character[], inserter: CharacterInserter) => (word: string): string => {\n  if (punctSet.length === 0) return word\n  return inserter.apply(word, randomEle(punctSet))\n}\n\n\nexport const SpecialWordModifier = (specialSet: Character[], inserter: CharacterInserter) => (word: string): string => {\n  if (specialSet.length === 0) return word\n  return inserter.apply(word, randomEle(specialSet))\n}\n\nconst WordModifiers = [CapsWordModifier, NumsWordModifier, PunctWordModifier, SpecialWordModifier]\nexport default WordModifiers\n\n","import { CourseLevel } from \"../../assets/courses/Courses\"\nimport { charsAtCourseLevel } from \"../../utils/course-utils\"\nimport { sanitizeCode } from \"../../utils/text-utils\"\nimport CharacterSet, { CharacterType, Character } from \"../CharacterSet\"\nimport Keyboard from \"../Keyboard\"\nimport { Language } from \"../Language\"\nimport CharacterInserter from \"./CharacterInserter\"\nimport MarkovChain from \"./MarkovChain\"\nimport { CapsWordModifier, NumsWordModifier, PunctWordModifier, SpecialWordModifier } from \"./WordModifiers\"\n\nexport interface TrainingStringGenerator {\n  generate(options?: any): string\n}\n\nexport class MockTrainingStringGenerator implements TrainingStringGenerator {\n  constructor(private trainingString: string) {}\n  generate(): string {\n    return this.trainingString\n  }\n}\n\nexport class GuidedModeStringGenerator implements TrainingStringGenerator {\n  constructor(private _keyboard: Keyboard, private _language: Language, private _courseLevels: CourseLevel[]) {}\n\n  generate(options: any = {}): string {\n    let words = this.newUnmodifiedWords(options)\n    const modifier = this.newWordModifier(options)\n    words = modifier(words)\n    return words.join(\" \")\n  }\n\n  private newWordModifier = ({\n    guidedHasCaps = false,\n    guidedHasNumbers = false,\n    guidedHasPunctuation = false,\n    guidedHasSpecials = false,\n  }) => {\n    const inserter = new CharacterInserter(this._language.vowels)\n    const modifiers: { (word: string): string }[] = []\n    if (guidedHasCaps) modifiers.push(CapsWordModifier())\n    if (guidedHasNumbers) modifiers.push(NumsWordModifier(this._language.characterSet.numberSet))\n    if (guidedHasPunctuation) modifiers.push(PunctWordModifier(this._language.characterSet.punctSet, inserter))\n    if (guidedHasSpecials) modifiers.push(SpecialWordModifier(this._language.characterSet.specialSet, inserter))\n    return (words: string[]) => {\n      if (modifiers.length !== 0)\n        return words.map(word => {\n          for (const mod of modifiers) {\n            word = mod(word)\n          }\n          return word\n        })\n      return words\n    }\n  }\n\n  private newUnmodifiedWords(options: any): string[] {\n    // get markovchain based on restricted dictionary (based on fullcharset/traininglevel)\n    const {\n      guidedLevelIndex,\n      guidedWordLengthMin = 3, \n      guidedWordLengthMax = 12,\n      guidedNumWords = 10,\n      // guidedLikelihoodModified,\n    } = options\n    const alphaMap = this.alphaMapAtLevel(guidedLevelIndex)\n    const letters = this._language.alphabet.filter(ch => alphaMap[ch] != null)\n    const vowels = this._language.vowels.filter(vowel => alphaMap[vowel] != null)\n    // hardcoded expeptions for english word generation\n    const hasEnoughVowels = vowels.length >= 2 && !letters.every(letter => \"piuoy\".includes(letter))\n    const wantsMarkovChain = hasEnoughVowels// && Math.abs(guidedWordLengthMax - guidedWordLengthMin) > 4\n    let newWord\n    if (wantsMarkovChain) {\n      const chain = this.newMarkovChain(alphaMap)\n      newWord = (): string => chain.generate({min: guidedWordLengthMin, max: guidedWordLengthMax})\n    } else {\n      newWord = (): string => this.randomWordFrom({min: guidedWordLengthMin, max: guidedWordLengthMax}, letters)\n    }\n    const words: Array<string> = []\n    while (words.length < guidedNumWords) {\n      words.push(newWord())\n    }\n    return words\n  }\n  randomWordFrom(length: { min: number; max: number } = { min: 6, max: 6 }, letters: string[]): string {\n    let {min, max} = length\n    if (min <= 1) min = 2\n    if (max <= 1) max = 2\n    const l = Math.floor(Math.random() * Math.abs(max - min)) + Math.min(max, min)\n    console.log(\"generating a random word of length: \", l)\n    let word = \"\"\n    for (let i = 0; i < l; i++) {\n      const letter = letters[Math.floor(Math.random() * letters.length)]\n      word = word.concat(letter)\n    }\n    return word\n  }\n  private newMarkovChain(alphaMap: { [ch: string]: true } = this._language.alphaMap): MarkovChain {\n    const byAlphaMap = (word: string) => !word.split(\"\").some(ch => alphaMap[ch] == null)\n    const filteredDict = this._language.dictionary.filter(byAlphaMap)\n    return new MarkovChain(3, filteredDict)\n  }\n\n  private charsAtLevel(lvl: number, type: CharacterType = \"LOWERCASE_LETTER\"): Character[] {\n    return charsAtCourseLevel(this._language.characterSet, this._courseLevels[lvl], this._keyboard).filter(\n      ({ type: t }) => t === type\n    )\n  }\n\n  private alphaMapAtLevel(lvl: number): { [ch: string]: true } {\n    const level = this._courseLevels[lvl]\n\n    if (level == null) return this._language.alphaMap\n\n    const lvlMap: { [ch: string]: true } = {}\n    const glyphs = CharacterSet.uniqueGlyphs(this.charsAtLevel(lvl))\n    for (const glyph of glyphs) lvlMap[glyph] = true\n    lvlMap[\" \"] = true // special case for space\n    return lvlMap\n  }\n}\n\nexport class PracticeModeStringGenerator implements TrainingStringGenerator {\n  private _textCursor: number\n  private _sentenceCursor: number\n  private _sentences: string[]\n\n  constructor(private language: Language, private _sourceText: string) {\n    // TODO: ensure sourceText has been sanitized\n    // TODO: make language-aware\n    this._textCursor = 0\n    this._sentenceCursor = 0\n    this._sentences = this.parseSentences()\n  }\n\n  generate(): string {\n    // Generate subsequent sentence on each call\n    const sentence = this._sentences[this._sentenceCursor]\n    this._sentenceCursor = (this._sentenceCursor + 1) % this._sentences.length\n    return sentence ? sentence : \"\"\n  }\n\n  /*  reset(): void {\n    this._sentenceCursor = this._textCursor = 0\n  } */\n\n  get sourceText(): string {\n    return this._sourceText\n  }\n\n  private parseSentences(): string[] {\n    const sentences: string[] = []\n    let sentence = this.sentence()\n    while (sentence.wasFound) {\n      sentences.push(sentence.str!)\n      sentence = this.sentence()\n    }\n    return sentences\n  }\n\n  private sentence(): { wasFound: boolean; str?: string } {\n    // TODO: make dynamic and language-agnostic\n    let cursor = this.cursorAt()\n    const minimalLength = 5 // sentences shorter than this will be merged\n    if (!cursor.isValid) return { wasFound: false }\n    const isWhiteSpace = (ch: string) => ch === \" \" || ch === \"\\t\" || ch === \"\\n\"\n\n    // Move cursor to first non-white character\n    while (isWhiteSpace(cursor.ch)) {\n      cursor = this.cursorAt(cursor.index + 1)\n    }\n    if (!cursor.isValid) return { wasFound: false }\n    const startIdx = cursor.index\n\n    // Move cursor to the end of sentence\n    const isLetter = (ch: string) => this.language.alphaMap[ch] != null\n    const isPeriodMark = (ch: string): boolean => ch === \".\" || ch === \"!\" || ch === \"?\"\n    const isNewLine = (ch: string): boolean => ch === '\\n'\n    const brackets = this.language.characterSet.punctSet.filter(({ behavior }) => behavior === \"BRACKET\")\n    const isBracketMark = (ch: string): boolean => CharacterSet.uniqueGlyphs(brackets).includes(ch) // TODO: include parentheses, brackets...\n    const wantedBrackets: string[] = []\n    const isWantedBracket = (ch: string): boolean => wantedBrackets.some(wanted => ch === wanted)\n\n    const isEndOfSentence = (cursor: { isValid: boolean; index: number; ch: string }): boolean => {\n      const next = this.cursorAt(cursor.index + 1)\n      if (!next.isValid) return true\n      if (cursor.index - startIdx < minimalLength) return false\n      if ((isPeriodMark(cursor.ch) || isBracketMark(cursor.ch)) && isNewLine(next.ch)) return true\n      if (wantedBrackets.length === 0 && !isPeriodMark(next.ch)) {\n        // Successive period marks\n        if (isPeriodMark(cursor.ch)) return true\n        if (isBracketMark(cursor.ch) && sentenceHasPeriod) return true\n      }\n      return false\n    }\n\n    let sentenceHasPeriod = false\n    let endReached = false\n    const isApostrophe = (ch: string) => {\n      if (ch !== \"'\") return false\n      const prev = this.cursorAt(cursor.index - 1)\n      const next = this.cursorAt(cursor.index + 1)\n      if (!next.isValid) return false\n      return isLetter(prev.ch) && isLetter(next.ch)\n    } // TODO: add support for Torres', n', etc\n    while (!endReached) {\n      if (!cursor.isValid) {\n        endReached = true\n      } else {\n        if (isBracketMark(cursor.ch) && !isApostrophe(cursor.ch)) {\n          if (isWantedBracket(cursor.ch)) {\n            wantedBrackets.splice(\n              // TODO: investigate \"Function declared in a loop contains unsafe references to variable(s)\"\n              // eslint-disable-next-line no-loop-func\n              wantedBrackets.findIndex(wanted => cursor.ch === wanted),\n              1\n            )\n          } else {\n            const { glyph, bracketPair } = brackets.find(\n              // TODO: same as above\n              // eslint-disable-next-line no-loop-func\n              ({ glyph, bracketPair }) => cursor.ch === glyph || cursor.ch === bracketPair\n            ) as { glyph: string; bracketPair: string }\n            wantedBrackets.push(bracketPair != null ? bracketPair : glyph) // TODO: generalize\n          }\n        }\n        if (isPeriodMark(cursor.ch) && wantedBrackets.length !== 0) sentenceHasPeriod = true\n        endReached = isEndOfSentence(cursor)\n      }\n      if (!endReached) cursor = this.cursorAt(cursor.index + 1)\n    }\n    const endIdx = cursor.index\n\n    // If end == start position, return no sentence found\n    if (startIdx === endIdx) return { wasFound: false }\n\n    // Return the found sentence\n    const sentence = this._sourceText.slice(startIdx, endIdx + 1)\n    this._textCursor = endIdx + 1\n    return { wasFound: true, str: sentence }\n  }\n\n  private cursorAt(idx: number = this._textCursor) {\n    if (idx < 0 || idx > this._sourceText.length) return { isValid: false, index: idx, ch: \"\" }\n    return { isValid: true, index: idx, ch: this._sourceText[idx] }\n  }\n}\n\nexport class CodeModeStringGenerator implements TrainingStringGenerator {\n  private _cursor: number\n  private _code: string\n  codeLines: number\n  constructor(_code: string, codeLines: number = 4) {\n    this._code = sanitizeCode(_code)\n    this._cursor = 0\n    this.codeLines = codeLines\n  }\n  generate(options?: any): string {\n    const lines: string[] = []\n    let cursor = this._cursor\n    let start,\n      end = 0\n    for (let i = 0; i < this.codeLines; i++) {\n      start = cursor\n      end = this._code.indexOf(\"\\n\", start) + 1\n      if (end <= 0) end = this._code.length\n      const line = this._code.slice(start, end)\n      lines.push(line)\n      cursor = end\n      if (cursor >= this._code.length) break\n    }\n    this._cursor = cursor % this._code.length\n    return lines.join(\"\")\n  }\n}\n","\nconst light = {\n  \"--color-primary\": \"#fff\",\n  \"--color-secondary\": \"#eee\",\n  \"--color-tertiary\": \"#ddd\",\n  \n  \"--text-primary\": \"#0e0e0e\",\n  \"--text-secondary\": \"#999\",\n\n  \"--color-accent\": \"#5e5e5e\",\n  \"--text-accent\": \"#eee\",\n  \"--text-background-highlight\": \"#66ffff\",\n  \"--text-color-highlight\": \"#ffffff\",\n\n  \"--mistake\": \"#ff6666\",\n  \"--correct\": \"#b3ff66\",\n  color: \"var(--text-primary)\"\n}\n\nconst dark = {\n  \"--color-primary\": \"#303030\",\n  \"--color-secondary\": \"#777\",\n  \"--color-tertiary\": \"#555\",\n  \n  \"--text-primary\": \"#eee\",\n  \"--text-secondary\": \"#999\",\n  \n  \"--color-accent\": \"#eee\",\n  \"--text-accent\": \"#111\",\n  \"--text-background-highlight\": \"#66ffff\",\n  \"--text-color-highlight\": \"#ffffff\",\n  \"--mistake\": \"#ff6666\",\n  \"--correct\": \"#b3ff66\",\n  color: \"var(--text-primary)\"\n}\n\nexport const themes = {\n  light: light,\n  dark: dark,\n}\n","import { sanitizeStringForGlyphs } from \"../utils/text-utils\";\nimport { Language } from \"./Language\";\n\nexport default class TrainingText {\n    private _sanitized: string\n    constructor(private _raw: string, language: Language) {\n        this._sanitized = sanitizeStringForGlyphs(this._raw, language.uniqueGlyphs)\n    }\n    get text() {\n        return this._sanitized\n    }\n    get raw() {\n        return this._raw\n    }\n}","import { Hand, Finger } from \"../../core/Keyboard\"\n\n\nexport interface CourseLevel {\n  description: string\n  keyBoardRows: number[]\n  hand: Hand\n  fingers: Finger[]\n}\nexport type Course = {\n  name: string\n  description: string\n  levels: CourseLevel[]\n}\n\n/* const Fingers: Course = {\n  name: \"Finger by finger\",\n  description: \"TODO\",\n  levels: [\n    { description: \"Both indexes\", hand: Hand.ANY, fingers: [Finger.THUMB, Finger.INDEX] },\n    { description: \"Both indexes\", hand: Hand.ANY, fingers: [Finger.THUMB, Finger.INDEX, Finger.MIDDLE] },\n    { description: \"Both indexes\", hand: Hand.ANY, fingers: [Finger.THUMB, Finger.INDEX, Finger.MIDDLE, Finger.RING] },\n    { description: \"Both indexes\", hand: Hand.ANY, fingers: [Finger.ANY] },\n  ],\n} */\n\nconst GuidedCourse: Course = {\n  name: \"Guided Course\",\n  description: \"TODO\",\n  levels: [\n    { description: \"Home row; left hand; index\", keyBoardRows: [2], hand: Hand.LEFT, fingers: [Finger.INDEX] },\n    {\n      description: \"Home row; left hand; index, middle\",\n      keyBoardRows: [2],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    {\n      description: \"Home row; left hand; index, middle, ring\",\n      keyBoardRows: [2],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE, Finger.RING],\n    },\n    { description: \"Home row; left hand; any\", keyBoardRows: [2], hand: Hand.LEFT, fingers: [Finger.ANY] },\n    { description: \"Home row; right hand; index\", keyBoardRows: [2], hand: Hand.RIGHT, fingers: [Finger.INDEX] },\n    {\n      description: \"Home row; right hand; index, middle\",\n      keyBoardRows: [2],\n      hand: Hand.RIGHT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    { description: \"Home row; right hand; any\", keyBoardRows: [2], hand: Hand.RIGHT, fingers: [Finger.ANY] },\n    { description: \"Home row; full\", keyBoardRows: [2], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Top row; left hand; index\", keyBoardRows: [1], hand: Hand.LEFT, fingers: [Finger.INDEX] },\n    {\n      description: \"Top row; left hand; index, middle\",\n      keyBoardRows: [1],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    {\n      description: \"Top row; left hand; index, middle, ring\",\n      keyBoardRows: [1],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE, Finger.RING],\n    },\n    { description: \"Top row; left hand; any\", keyBoardRows: [1], hand: Hand.LEFT, fingers: [Finger.ANY] },\n    { description: \"Top row; right hand; index\", keyBoardRows: [1], hand: Hand.RIGHT, fingers: [Finger.INDEX] },\n    {\n      description: \"Top row; right hand; index, middle\",\n      keyBoardRows: [1],\n      hand: Hand.RIGHT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    {\n      description: \"Top row; right hand; index, middle, ring\",\n      keyBoardRows: [1],\n      hand: Hand.RIGHT,\n      fingers: [Finger.INDEX, Finger.MIDDLE, Finger.RING],\n    },\n    { description: \"Top row; right hand; any\", keyBoardRows: [1], hand: Hand.RIGHT, fingers: [Finger.ANY] },\n    { description: \"Top row; full\", keyBoardRows: [1], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Bottom row; left hand; index\", keyBoardRows: [3], hand: Hand.LEFT, fingers: [Finger.INDEX] },\n    {\n      description: \"Bottom row; left hand; index, middle\",\n      keyBoardRows: [3],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    {\n      description: \"Bottom row; left hand; index, middle, ring\",\n      keyBoardRows: [3],\n      hand: Hand.LEFT,\n      fingers: [Finger.INDEX, Finger.MIDDLE, Finger.RING],\n    },\n    { description: \"Bottom row; left hand; any\", keyBoardRows: [3], hand: Hand.LEFT, fingers: [Finger.ANY] },\n    { description: \"Bottom row; right hand; index\", keyBoardRows: [3], hand: Hand.RIGHT, fingers: [Finger.INDEX] },\n    /* {\n      description: \"Bottom row; right hand; index, middle\",\n      keyBoardRows: [3],\n      hand: Hand.RIGHT,\n      fingers: [Finger.INDEX, Finger.MIDDLE],\n    },\n    {\n      description: \"Bottom row; right hand; index, middle, ring\",\n      keyBoardRows: [3],\n      hand: Hand.RIGHT,\n      fingers: [Finger.INDEX, Finger.MIDDLE, Finger.RING],\n    },\n    { description: \"Bottom row; right hand; any\", keyBoardRows: [3], hand: Hand.RIGHT, fingers: [Finger.ANY] }, */\n    { description: \"Bottom row; full\", keyBoardRows: [3], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Home row; full\", keyBoardRows: [2], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Top row; full\", keyBoardRows: [1], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Home + Top full\", keyBoardRows: [1, 2], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Home + Bottome full\", keyBoardRows: [2, 3], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Full letters\", keyBoardRows: [1, 2, 3], hand: Hand.ANY, fingers: [Finger.ANY] },\n    { description: \"Full keyboard\", keyBoardRows: [0, 1, 2, 3], hand: Hand.ANY, fingers: [Finger.ANY] },\n  ],\n}\nconst Courses = { guidedCourse: GuidedCourse }\nexport default Courses\n","import CharacterSet from \"../../../core/CharacterSet\"\nimport { Language } from \"../../../core/Language\"\nimport { dictionary } from \"./english-dict.json\"\n\nconst characterSet = new CharacterSet([\n  // WHITESPACE\n  { code: [\"Tab\"], glyph: \"\\t\", type: \"WHITESPACE\", behavior: \"NONE\" },\n  { code: [\"Enter\"], glyph: \"\\n\", type: \"WHITESPACE\", behavior: \"NONE\" },\n  { code: [\"Space\"], glyph: \" \", type: \"WHITESPACE\", behavior: \"NONE\" },\n  // ALPHABET\n  { code: [\"KeyA\"], glyph: \"a\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyB\"], glyph: \"b\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyC\"], glyph: \"c\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyD\"], glyph: \"d\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyE\"], glyph: \"e\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyF\"], glyph: \"f\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyG\"], glyph: \"g\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyH\"], glyph: \"h\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyI\"], glyph: \"i\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyJ\"], glyph: \"j\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyK\"], glyph: \"k\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyL\"], glyph: \"l\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyM\"], glyph: \"m\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyN\"], glyph: \"n\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyO\"], glyph: \"o\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyP\"], glyph: \"p\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyQ\"], glyph: \"q\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyR\"], glyph: \"r\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyS\"], glyph: \"s\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyT\"], glyph: \"t\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyU\"], glyph: \"u\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyV\"], glyph: \"v\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyW\"], glyph: \"w\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyX\"], glyph: \"x\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyY\"], glyph: \"y\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n  { code: [\"KeyZ\"], glyph: \"z\", type: \"LOWERCASE_LETTER\", behavior: \"APPEND\" },\n\n  // DIGITS\n  { code: [\"Digit0\"], glyph: \"0\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit1\"], glyph: \"1\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit2\"], glyph: \"2\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit3\"], glyph: \"3\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit4\"], glyph: \"4\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit5\"], glyph: \"5\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit6\"], glyph: \"6\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit7\"], glyph: \"7\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit8\"], glyph: \"8\", type: \"NUMBER\", behavior: \"APPEND\" },\n  { code: [\"Digit9\"], glyph: \"9\", type: \"NUMBER\", behavior: \"APPEND\" },\n\n  // 'PUNCTUATION'\n  { code: [\"Comma\"], glyph: \",\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Period\"], glyph: \".\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Digit1\"], glyph: \"!\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Slash\"], glyph: \"?\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Semicolon\"], glyph: \";\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Semicolon\"], glyph: \":\", type: \"PUNCTUATION\", behavior: \"APPEND\" },\n  { code: [\"Quote\"], glyph: \"'\", type: \"PUNCTUATION\", behavior: \"SPLIT\" },\n  { code: [\"Minus\"], glyph: \"-\", type: \"PUNCTUATION\", behavior: \"SPLIT\" },\n  {\n    code: [\"Digit9\", \"Digit0\"],\n    glyph: \"(\",\n    bracketPair: \")\",\n    type: \"PUNCTUATION\",\n    behavior: \"BRACKET\",\n  },\n  { code: [\"Quote\"], glyph: \"'\", type: \"PUNCTUATION\", behavior: \"BRACKET\" },\n  { code: [\"Quote\"], glyph: '\"', type: \"PUNCTUATION\", behavior: \"BRACKET\" },\n  // SPECIALS\n  { code: [\"Digit2\"], glyph: \"@\", type: \"SPECIAL\", behavior: \"SPLIT\" },\n  { code: [\"Digit3\"], glyph: \"#\", type: \"SPECIAL\", behavior: \"PREPEND\" },\n  { code: [\"Digit4\"], glyph: \"$\", type: \"SPECIAL\", behavior: \"APPEND\" },\n  { code: [\"Digit5\"], glyph: \"%\", type: \"SPECIAL\", behavior: \"APPEND\" },\n  { code: [\"Digit6\"], glyph: \"^\", type: \"SPECIAL\", behavior: \"OPERATOR\" },\n  { code: [\"Digit7\"], glyph: \"&\", type: \"SPECIAL\", behavior: \"OPERATOR\" },\n  { code: [\"Digit8\"], glyph: \"*\", type: \"SPECIAL\", behavior: \"APPEND\" },\n  { code: [\"Slash\"], glyph: \"/\", type: \"SPECIAL\", behavior: \"SPLIT\" },\n  { code: [\"Backquote\"], glyph: \"~\", type: \"SPECIAL\", behavior: \"PREPEND\" },\n  { code: [\"Backquote\"], glyph: \"`\", type: \"SPECIAL\", behavior: \"BRACKET\" },\n  { code: [\"Backslash\"], glyph: \"\\\\\", type: \"SPECIAL\", behavior: \"PREPEND\" },\n  { code: [\"BracketLeft\", \"BracketRight\"], glyph: \"[\", bracketPair: \"]\", type: \"SPECIAL\", behavior: \"BRACKET\" },\n  { code: [\"BracketLeft\", \"BracketRight\"], glyph: \"{\", bracketPair: \"}\", type: \"SPECIAL\", behavior: \"BRACKET\" },\n  { code: [\"Comma\", \"Period\"], glyph: \"<\", bracketPair: \">\", type: \"SPECIAL\", behavior: \"BRACKET\" },\n  { code: [\"Minus\"], glyph: \"_\", type: \"SPECIAL\", behavior: \"SPLIT\" },\n  { code: [\"Equal\"], glyph: \"=\", type: \"SPECIAL\", behavior: \"OPERATOR\" },\n  { code: [\"Equal\"], glyph: \"+\", type: \"SPECIAL\", behavior: \"OPERATOR\" },\n  /* \n    /// PROGRAMMING CHARACTERS\n    { code: [\"Backquote\"], glyph: \"`\", type: PROGRAMMING, behavior: 'BRACKET' },\n    { code: [\"BracketLeft\", \"BracketRight\"], glyph: \"[\", bracketPair: \"]\", type: PROGRAMMING, behavior: 'BRACKET' },\n    { code: [\"BracketLeft\", \"BracketRight\"], glyph: \"{\", bracketPair: \"}\", type: PROGRAMMING, behavior: 'BRACKET' },\n    { code: [\"Slash\"], glyph: \"/\", type: PROGRAMMING, behavior: 'SPLIT' },\n    { code: [\"Backslash\"], glyph: \"\\\\\", type: PROGRAMMING, behavior: 'PREPEND' },\n    { code: [\"Comma\", \"Period\"], glyph: \"<\", bracketPair: \">\", type: PROGRAMMING, behavior: 'BRACKET' },\n    { code: [\"Minus\"], glyph: \"_\", type: PROGRAMMING, behavior: 'SPLIT' },\n    { code: [\"Minus\"], glyph: \"-\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Equal\"], glyph: \"+\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Digit8\"], glyph: \"*\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Equal\"], glyph: \"=\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Digit1\",\"Equal\"], glyph: \"!=\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Equal\"], glyph: \"==\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Equal\"], glyph: \"++\", type: PROGRAMMING, behavior: 'PREPEND'_OR_'APPEND' },\n    { code: [\"Comma\",\"Period\"], glyph: \"<=\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Comma\",\"Period\"], glyph: \">=\", type: PROGRAMMING, behavior: 'OPERATOR' },\n    { code: [\"Digit5\"], glyph: \"%\", type: PROGRAMMING, behavior: 'OPERATOR' } */\n])\n\nconst vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"] // TODO switch to KeyCode[]\n\nconst English = new Language(characterSet, vowels, dictionary)\n\nexport default English\n","import CharacterSet, { Character } from \"./CharacterSet\"\nimport { KeyCode } from \"./KeyCode\"\n\nexport class Language {\n  characterSet: CharacterSet\n  vowels: string[]\n  dictionary: string[]\n  characters: Character[]\n  alphabet: string[]\n  numbers: string[]\n  punctuation: string[]\n  specials: string[]\n  alphaMap: {[ch: string]: true}\n  uniqueGlyphs: string[]\n  uniqueKeyCodes: KeyCode[]\n  // TODO terminators: Character[]\n  constructor(characterSet: CharacterSet, vowels: string[], dictionary: string[]) {\n    this.dictionary = dictionary\n    this.characterSet = characterSet\n    this.vowels = vowels\n    this.characters = this.characterSet.characters\n    this.uniqueGlyphs = CharacterSet.uniqueGlyphs(this.characters)\n    this.uniqueKeyCodes = CharacterSet.uniqueKeyCodes(this.characters)\n    this.alphabet = this.characterSet.letterSet.map(({glyph}) => glyph)\n    this.numbers = this.characterSet.numberSet.map(({glyph}) => glyph)\n    this.punctuation = this.characterSet.punctSet.map(({glyph}) => glyph)\n    this.specials = this.characterSet.specialSet.map(({glyph}) => glyph)\n    this.alphaMap = {}\n    this.alphabet.forEach(ch => {\n      this.alphaMap[ch] = true\n      this.alphaMap[ch.toUpperCase()] = true\n    })\n    // TODO this.terminators = \n  }\n}\n","import Keyboard, { KeyCapLabelMap } from \"../../core/Keyboard\"\n\n\n\nconst keyCapLabelMap: KeyCapLabelMap = {\n  NONE: { main: \"\" },\n  Backquote: { main: \"`\", shift: \"~\" },\n  Digit1: { main: \"1\", shift: \"!\" },\n  Digit2: { main: \"2\", shift: \"@\" },\n  Digit3: { main: \"3\", shift: \"#\" },\n  Digit4: { main: \"4\", shift: \"$\" },\n  Digit5: { main: \"5\", shift: \"%\" },\n  Digit6: { main: \"6\", shift: \"^\" },\n  Digit7: { main: \"7\", shift: \"&\" },\n  Digit8: { main: \"8\", shift: \"*\" },\n  Digit9: { main: \"9\", shift: \"(\" },\n  Digit0: { main: \"0\", shift: \")\" },\n  Minus: { main: \"-\", shift: \"_\" },\n  Equal: { main: \"=\", shift: \"+\" },\n  Backspace: { main: \"Backspace\" },\n  Tab: { main: \"Tab\" },\n  KeyQ: { main: \"q\", shift: \"Q\" },\n  KeyW: { main: \"w\", shift: \"W\" },\n  KeyE: { main: \"e\", shift: \"E\" },\n  KeyR: { main: \"r\", shift: \"R\" },\n  KeyT: { main: \"t\", shift: \"T\" },\n  KeyY: { main: \"y\", shift: \"Y\" },\n  KeyU: { main: \"u\", shift: \"U\" },\n  KeyI: { main: \"i\", shift: \"I\" },\n  KeyO: { main: \"o\", shift: \"O\" },\n  KeyP: { main: \"p\", shift: \"P\" },\n  BracketLeft: { main: \"[\", shift: \"{\" },\n  BracketRight: { main: \"]\", shift: \"}\" },\n  Backslash: { main: \"\\\\\", shift: \"|\" },\n  CapsLock: { main: \"CapsLock\" },\n  KeyA: { main: \"a\", shift: \"A\" },\n  KeyS: { main: \"s\", shift: \"S\" },\n  KeyD: { main: \"d\", shift: \"D\" },\n  KeyF: { main: \"f\", shift: \"F\" },\n  KeyG: { main: \"g\", shift: \"G\" },\n  KeyH: { main: \"h\", shift: \"H\" },\n  KeyJ: { main: \"j\", shift: \"J\" },\n  KeyK: { main: \"k\", shift: \"K\" },\n  KeyL: { main: \"l\", shift: \"L\" },\n  Semicolon: { main: \";\", shift: \":\" },\n  Quote: { main: \"'\", shift: '\"' },\n  Enter: { main: \"Enter\" },\n  ShiftLeft: { main: \"Shift\" },\n  KeyZ: { main: \"z\", shift: \"Z\" },\n  KeyX: { main: \"x\", shift: \"X\" },\n  KeyC: { main: \"c\", shift: \"C\" },\n  KeyV: { main: \"v\", shift: \"V\" },\n  KeyB: { main: \"b\", shift: \"B\" },\n  KeyN: { main: \"n\", shift: \"N\" },\n  KeyM: { main: \"m\", shift: \"M\" },\n  Comma: { main: \",\", shift: \"<\" },\n  Period: { main: \".\", shift: \">\" },\n  Slash: { main: \"/\", shift: \"?\" },\n  ShiftRight: { main: \"Shift\" },\n  ControlLeft: { main: \"Ctrl\" },\n  AltLeft: { main: \"Alt\" },\n  Space: { main: \"\" },\n  AltRight: { main: \"Alt\" },\n  ControlRight: { main: \"Ctrl\" }\n}\n\nconst EnglishQwertyLayout = new Keyboard(keyCapLabelMap)\n\nexport default EnglishQwertyLayout","import Keyboard from \"../core/Keyboard\"\nimport { Language } from \"../core/Language\"\nimport { PracticeModeStringGenerator, TrainingStringGenerator } from \"../core/TrainingStringGenerator/TrainingStringGenerator\"\nimport TrainingText from \"../core/TrainingText\"\n\nimport Courses, { Course, CourseLevel } from \"../assets/courses/Courses\"\nimport English from \"../assets/languages/english/English\"\nimport qwerty from \"../assets/keyboard_layouts/en_qwerty\"\n// import state_and_revolution from \"../assets/texts/state_and_revolution\"\nimport { KeyCode } from \"../core/KeyCode\"\n\nexport const FontSizes = [\"1rem\", \"1.5rem\", \"2.25rem\"]\nexport type MachineState = \"INIT\" | \"LOADED\" | \"READY\" | \"PAUSED\" | \"TRAINING\" | \"SETTINGS\"\n\nexport enum TrainingMode {\n  GUIDED = \"Guided\",\n  PRACTICE = \"Practice\",\n  CODE = \"Code\",\n}\nconst defaultTheme = 'light'\nconst defaultLayout = qwerty\nconst defaultLanguage = English\nconst practiceWelcomeText = \"Welcome to the touch typing trainer! Use the menu above to change training modes. You can also adjust settings for each mode. This is only a demo text, feel free to change it to whatever you like. \\nEnjoy!\"\nconst defaultText = new TrainingText(practiceWelcomeText, English)\nconst defaultMode = TrainingMode.PRACTICE\nconst defaultGenerator = new PracticeModeStringGenerator(defaultLanguage, defaultText.text)\nconst defaultCourse = Courses.guidedCourse\nconst defaultCodeSourceText = String.raw`export class CodeModeStringGenerator implements TrainingStringGenerator {\n  private _cursor: number\n  private _code: string\n  constructor(_code: string) {\n    this._code = sanitizeCode(_code)\n    this._cursor = 0\n  }\n  generate(options: any = { codeLines: 4 }): string {\n    const lines: string[] = []\n    const newLineAt = (idx: number) => this._code[idx] === \"\\n\"\n\n    let cursor = this._cursor\n    let start,\n      end = 0\n    for (let i = 0; i < options.codeLines; i++) {\n      start = cursor\n      end = this._code.indexOf(\"\\n\", start) + 1\n      if (end <= 0) end = this._code.length\n      const line = this._code.slice(start, end)\n      lines.push(line)\n      cursor = end\n      if (cursor >= this._code.length) break\n    }\n    this._cursor = cursor\n    return lines.join(\"\")\n  }\n}`\n\n\nexport enum CodeLanguage {\n  \"JS\" = \"JavaScript\",\n  \"TS\" = \"TypeScript\",\n  \"C\" = \"C\",\n  \"Bash\" = \"Bash\",\n  \"Python\" = \"Python\",\n}\n\nexport interface State {\n  [prop: string]: any\n  machineState: MachineState\n  currentActiveKeyCodes: KeyCode[]\n  currentUserPressedKeys: Set<string>\n  trainingStringGenerator: TrainingStringGenerator\n  trainingString: string\n  cursor: number\n  mistakeCharIndices: Set<number>\n  wordsPerMinute: number\n  successRate: number\n  totalSessions: number\n  wordsPerMinuteAverage: number\n  successRateAverage: number\n  uiModeSelectShow: boolean\n  uiSettingsModalShow: boolean\n  uiShowWhiteSpaceSymbols: boolean\n  uiTheme: string//{ [index: string]: CSSCustomProperties }\n\n  language: Language\n  keyboard: Keyboard\n  trainingMode: TrainingMode\n  trainingStringFontSize: number\n\n  guidedCourse: Course\n  guidedCourseLevels: CourseLevel[]\n  guidedLevelIndex: number\n  guidedWordLengthMin: number\n  guidedWordLengthMax: number\n  guidedNumWords: number\n  guidedHasCaps: boolean\n  guidedHasPunctuation: boolean\n  guidedHasNumbers: boolean\n  guidedHasSpecials: boolean\n  guidedLikelihoodModified: number\n\n  practiceSourceText: string\n\n  codeSourceText: string\n  codeLines: number\n}\nexport const defaultState: State = {\n  machineState: \"INIT\",\n  language: defaultLanguage,\n  keyboard: defaultLayout,\n  trainingMode: defaultMode,\n  trainingStringGenerator: defaultGenerator,\n  currentActiveKeyCodes: [],\n  currentUserPressedKeys: new Set(),\n  trainingString: \"\",\n  cursor: 0,\n  mistakeCharIndices: new Set(),\n  wordsPerMinute: 0,\n  successRate: 0,\n  totalSessions: 0,\n  wordsPerMinuteAverage: 0,\n  successRateAverage: 0,\n  \n  uiModeSelectShow: false,\n  uiSettingsModalShow: false,\n  uiShowWhiteSpaceSymbols: true,\n  \n  uiTheme: defaultTheme,\n  trainingStringFontSize: 1,\n  \n  guidedCourse: defaultCourse,\n  guidedCourseLevels: defaultCourse.levels,\n  guidedLevelIndex: 0,\n\n  guidedWordLengthMin: 5,\n  guidedWordLengthMax: 9,\n  guidedNumWords: 12,\n  guidedHasCaps: false,\n  guidedHasPunctuation: false,\n  guidedHasNumbers: false,\n  guidedHasSpecials: false,\n  guidedLikelihoodModified: 0.8,\n\n  practiceSourceText: defaultText.text,\n\n  codeSourceText: defaultCodeSourceText,\n  codeLines: 4,\n}\n\nexport const inactivityDelay = 2000 //todo: mettre dans settings\n\nexport default defaultState\n","import React from 'react'\nimport { TrainingMode } from '../defaultState'\nimport './FormattedText.css'\n\nconst testId = \"formattedString\"\ninterface MyProps { greyed: boolean, cursor: number, trainingString: string, mistakeCharIndices: Set<number>, mode: TrainingMode, uiShowWhiteSpaceSymbols: boolean }\n\nexport const FormattedText: React.FC<MyProps> = (props: MyProps): JSX.Element => {\n  const { cursor, trainingString, mistakeCharIndices } = props\n\n  let uniquekey = 0\n  function replaceWhiteSpacesWithSymbols(str: string): string {\n    const tab = `&emsp;&RightArrowBar;`\n    const lineFeed = `&crarr;<br>`\n    const blankAndInvisibleSpace = `&blank;&#8203;`\n    return str.replace(/\\t/g, tab).replace(/\\n/g, lineFeed).replace(/\\s/g, blankAndInvisibleSpace)\n  }\n  function replaceWhiteSpacesWithHTML(str: string): string {\n    const tab = `&emsp;&emsp;`\n    const lineFeed = `&emsp;<br>`\n    const space = `&emsp;`\n    return str.replace(/\\t/g, tab).replace(/\\n/g, lineFeed).replace(/\\s/g, space)\n  }\n  function escapeHtml(unsafe: string): string {\n    const text = document.createTextNode(unsafe);\n    const p = document.createElement('p');\n    p.appendChild(text);\n    const safe = p.innerHTML\n    p.remove()\n    return safe\n  }\n  function format(str: string): string {\n    let newStr = str\n    if (newStr != null) {\n      newStr = props.uiShowWhiteSpaceSymbols\n        ? replaceWhiteSpacesWithSymbols(escapeHtml(newStr))\n        : replaceWhiteSpacesWithHTML(newStr)\n      return newStr\n    } else\n      return \"\"\n  }\n  function tag(str: string, className: string): JSX.Element {\n    const retStr = format(str)\n    return (<span key={className+uniquekey++} className={className} dangerouslySetInnerHTML={{__html: retStr}}></span>)\n  }\n\n  //edge case (easter egg)\n  if (trainingString === \"\" || trainingString.split(\"\").every(v => v === \" \")) return (<p data-testid={testId}><span role=\"img\" aria-label=\"shrugging woman\">🤷</span></p>)\n\n  // trainingString = replaceSpaces(trainingString)\n  const before: (JSX.Element | string)[] = []\n  let current\n  const after = tag(trainingString.slice(cursor + 1), 'after')\n\n  // Tag mistakes, up to but not including cursor\n  let start = 0\n  for (const e of mistakeCharIndices) {\n    if (e === cursor) break\n    before.push(tag(trainingString.slice(start, e), 'correct'))\n    before.push(tag(trainingString[e], 'mistake'))\n    start = e + 1\n  }\n  before.push(tag(trainingString.slice(start, cursor), 'correct'))\n\n  // Tag cursor\n  if (mistakeCharIndices.has(cursor)) {\n    current = tag(trainingString[cursor], 'typo')\n    setTimeout(() => {\n      const typo = document.getElementsByClassName('typo')\n      if (typo[0] != null) typo[0].className = 'cursor'\n    }, 750)\n  } else {\n    current = tag(trainingString[cursor], 'cursor')\n  }\n\n  return (\n    <p data-testid={testId} className={props.greyed ? \"greyed\" : \"\"} style={{textAlign: \"left\"}}>\n      {before}\n      {current}\n      {after}\n    </p>\n  )\n\n}\n\nexport default FormattedText","import \"./VirtualKeyboard.css\"\nimport React, { useState } from \"react\"\nimport Keyboard, { KeyCapLabel } from \"../../core/Keyboard\"\nimport { KeyCode } from \"../../core/KeyCode\"\nimport { Form, FormCheck } from \"react-bootstrap\"\n\ninterface VKProps {\n  layout: Keyboard\n  pressed: Set<string>\n  active: KeyCode[]\n  currentKey: KeyCode\n}\n\nexport default function VirtualKeyboard(props: React.PropsWithChildren<VKProps>): JSX.Element {\n  function generateLabelHtml(keyCapLabel: KeyCapLabel): JSX.Element {\n    let label: JSX.Element\n    switch (Object.keys(keyCapLabel).length) {\n      case 1:\n        label = <p>{keyCapLabel.main}</p>\n        break\n      case 2:\n        label = (\n          <p>\n            {keyCapLabel.shift}\n            <br />\n            {keyCapLabel.main}\n          </p>\n        )\n        break\n      case 3:\n        label = (\n          <p>\n            {keyCapLabel.shift}\n            <br />\n            {keyCapLabel.main} {keyCapLabel.opt}\n          </p>\n        )\n        break\n      default:\n        label = <p></p>\n        break\n    }\n    return label\n  }\n  let [visible, setVisible] = useState(true)\n  return (\n    <div className={\"keyboard\"} id=\"keyboard\" data-testid=\"keyboard\">\n      <Form inline style={{marginLeft: '1rem'}}>\n        <FormCheck\n          type=\"switch\"\n          id=\"kb-switch\"\n          role=\"switch\"\n          onChange={() => setVisible(!visible)}\n          checked={visible}\n          style={{marginRight: '1rem'}}\n        />\n        {props.children}\n      </Form>\n      {!visible ||\n        props.layout.layout.map((row, rowIdx) => (\n          <ul key={\"row-\" + rowIdx} className={\"keyboard-flex-row row-\" + rowIdx}>\n            {row.map(keyBtn => {\n              // Determine style classes to apply to each btn\n              const classes: string[] = [\"key-btn\"]\n\n              classes.push(\"row-item-\" + rowIdx)\n              // Pressed keys\n              const keyIsPressed = props.pressed.size && props.pressed.has(keyBtn.code)\n              if (keyIsPressed) classes.push(\"pressed\")\n              // Active/inactive\n              const keyIsActive = props.active.includes(keyBtn.code)\n              if (!keyIsActive) classes.push(\"greyed\")\n              // Current\n              const keyIsCurrent = props.currentKey === keyBtn.code\n              if (keyIsCurrent) classes.push(\"highlight\")\n\n              // Generate label html\n              const labelHtml: JSX.Element = generateLabelHtml(keyBtn.label)\n\n              return (\n                <li id={keyBtn.code} data-testid={keyBtn.code} key={keyBtn.code} className={classes.join(\" \")}>\n                  {labelHtml}\n                </li>\n              )\n            })}\n          </ul>\n        ))}\n    </div>\n  )\n\n  /* \n    let row: JSX.Element[] = []\n    keyRow.forEach(keyBtnData => {\n      let label: {\n        __html: string\n      }\n      if (keyBtnData.label) {\n        label = { __html: keyBtnData.label }\n      } else {\n        label = { __html: keyBtnData.key }\n      }\n      let classes = [\"key-btn\"]\n      classes.push(\"row-item-\" + idx)\n      if (pressed.size && pressed.has(keyBtnData.code))\n        classes.push(\"pressed\")\n      if (!keyBtnData.finger || props.keyZones.every(keyZone => keyZone as string !== keyBtnData.finger))\n        classes.push(\"greyed\")\n      // if (keyBtnData.class) classes.push(...keyBtnData.class)\n      row.push(\n        <li\n          id={keyBtnData.code}\n          key={keyBtnData.code}\n          className={classes.join(\" \")}\n          dangerouslySetInnerHTML={label}\n        ></li>\n      )\n    })\n    keys.push(\n      <ul key={\"row-\" + idx} className={\"keyboard-flex-row row-\" + idx}>\n        {row}\n      </ul>\n    )\n  }\n  return (\n    <div className={\"keyboard\"} id=\"keyboard\" data-testid=\"keyboard\">\n      {keys}\n    </div>\n    ) \n    */\n}\n","import React from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport Modal from \"react-bootstrap/Modal\"\nimport { TrainingMode } from \"../../defaultState\"\n\nexport default function ModeSelectorModal(props: {\n  onHide: () => void\n  show: boolean\n  settrainingmode: (mode: TrainingMode) => void\n}): JSX.Element {\n  return (\n    <Modal {...props} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">Pick a training mode</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Button\n          block={true}\n          onClick={() => {\n            props.settrainingmode(TrainingMode.GUIDED)\n            props.onHide()\n          }}\n        >\n          <strong>Guided:</strong> choose this if you are learning to touch type\n        </Button>\n        <br />\n        <Button block={true} onClick={() => {props.settrainingmode(TrainingMode.PRACTICE); props.onHide()}}>\n          <strong>Practice:</strong> hone your skills\n        </Button>\n        <br />\n        <Button block={true} onClick={() => {props.settrainingmode(TrainingMode.CODE); props.onHide()}}>\n          <strong>Code:</strong> for programmers\n        </Button>\n        <br />\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { useState } from \"react\"\nimport { Button, Modal } from \"react-bootstrap\"\nimport { Language } from \"../../../core/Language\"\nimport TrainingText from \"../../../core/TrainingText\"\nimport { sanitizeCode } from \"../../../utils/text-utils\"\nimport { TrainingMode } from \"../../defaultState\"\n\ninterface MyProps {\n  onHide: () => void\n  show: boolean\n  mode: TrainingMode\n  language: Language\n\n  guidedWordLengthMin: number\n  guidedWordLengthMax: number\n    guidedNumWords: number\n  guidedHasCaps: boolean\n  guidedHasPunctuation: boolean\n  guidedHasNumbers: boolean\n  guidedHasSpecials: boolean\n  guidedLikelihoodModified: number\n\n  practiceSourceText: string\n\n  codeSourceText: string\n  codeLines: number\n  onSubmitChanges: (updatedOptions: any) => void\n}\n\nconst SettingsModal: React.FC<MyProps> = (props: MyProps) => {\n  let [draftSettings, setDraftSettings] = useState({\n    guidedWordLengthMin: props.guidedWordLengthMin,\n    guidedWordLengthMax: props.guidedWordLengthMax,\n    guidedNumWords: props.guidedNumWords,\n    guidedHasCaps: props.guidedHasCaps,\n    guidedHasPunctuation: props.guidedHasPunctuation,\n    guidedHasNumbers: props.guidedHasNumbers,\n    guidedHasSpecials: props.guidedHasSpecials,\n    guidedLikelihoodModified: props.guidedLikelihoodModified,\n    practiceSourceText: props.practiceSourceText,\n    codeSourceText: props.codeSourceText,\n    codeLines: props.codeLines,\n  })\n\n  const sanitizedText = (raw: string): string => {\n    return new TrainingText(raw, props.language).text\n  }\n\n  const handleChange = (prop: string, value: any) => {\n    setDraftSettings((prev: any) => ({ ...prev, [prop]: value }))\n  }\n\n  const handleSubmit = (settings: any) => {\n    props.onSubmitChanges(settings)\n  }\n\n  let form: JSX.Element = <></> // = options.parseForm(handleChange)\n\n  switch (props.mode) {\n    case TrainingMode.GUIDED:\n      form = (\n        <form>\n          <div>Word length:</div>\n          <div>\n            <input\n              id=\"minlength\"\n              type=\"number\"\n              value={draftSettings.guidedWordLengthMin}\n              min={1}\n              onChange={e => handleChange(\"guidedWordLengthMin\", e.target.value)}\n            />\n            <label htmlFor=\"minlength\">min</label>\n          </div>\n          <div>\n            <input\n              id=\"maxlength\"\n              type=\"number\"\n              value={draftSettings.guidedWordLengthMax}\n              min={1}\n              onChange={e => handleChange(\"guidedWordLengthMax\", e.target.value)}\n            />\n            <label htmlFor=\"maxlength\">max</label>\n          </div>\n          <div>\n            <div>\n              <label htmlFor=\"numwords\">Words:</label>\n            </div>\n            <div>\n              <input\n                id=\"numwords\"\n                type=\"number\"\n                value={draftSettings.guidedNumWords}\n                onChange={e => handleChange(\"guidedNumWords\", e.target.value)}\n              />\n            </div>\n          </div>\n          <hr />\n          <div>Modifiers:</div>\n          <div>\n            <input\n              id=\"chkbx-caps\"\n              type=\"checkbox\"\n              checked={draftSettings.guidedHasCaps}\n              onChange={e => setDraftSettings({ ...draftSettings, guidedHasCaps: !draftSettings.guidedHasCaps })}\n            />\n            <label htmlFor=\"chkbx-caps\">aA</label>\n          </div>\n          <div>\n            <input\n              id=\"chkbx-punct\"\n              type=\"checkbox\"\n              checked={draftSettings.guidedHasPunctuation}\n              onChange={e =>\n                setDraftSettings({ ...draftSettings, guidedHasPunctuation: !draftSettings.guidedHasPunctuation })\n              }\n            />\n            <label htmlFor=\"chkbx-punct\">!?</label>\n          </div>\n          <div>\n            <input\n              id=\"chkbx-nums\"\n              type=\"checkbox\"\n              checked={draftSettings.guidedHasNumbers}\n              onChange={e => setDraftSettings({ ...draftSettings, guidedHasNumbers: !draftSettings.guidedHasNumbers })}\n            />\n            <label htmlFor=\"chkbx-nums\">0-9</label>\n          </div>\n          <div>\n            <input\n              id=\"chkbx-spec\"\n              type=\"checkbox\"\n              checked={draftSettings.guidedHasSpecials}\n              onChange={e =>\n                setDraftSettings({ ...draftSettings, guidedHasSpecials: !draftSettings.guidedHasSpecials })\n              }\n            />\n            <label htmlFor=\"chkbx-spec\">$</label>\n          </div>\n        </form>\n      )\n      break\n    case TrainingMode.PRACTICE:\n      form = (\n        <form>\n          <label htmlFor=\"userTextInput\">Source Text:</label>\n          <textarea\n            id=\"userTextInput\"\n            name=\"sourceText\"\n            style={{ width: \"100%\", height: \"400px\" }}\n            onChange={e => handleChange(\"practiceSourceText\", sanitizedText(e.target.value))}\n            value={draftSettings.practiceSourceText}\n          />\n        </form>\n      )\n      break\n    case TrainingMode.CODE:\n      form = (\n        <form>\n          <label htmlFor=\"userTextInput\">Source Text:</label>\n          <textarea\n            id=\"userTextInput\"\n            name=\"sourceText\"\n            style={{ width: \"100%\", height: \"400px\" }}\n            value={draftSettings.codeSourceText}\n            onChange={e => handleChange(\"codeSourceText\", sanitizeCode(e.target.value))}\n          />\n        </form>\n      )\n  }\n\n  return (\n    <Modal show={props.show} onHide={props.onHide} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">Settings</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{form}</Modal.Body>\n      <Modal.Footer>\n        <Button\n          onClick={() => {\n            handleSubmit(draftSettings)\n            props.onHide()\n          }}\n        >\n          Done\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n","import React from 'react';\nimport './TextDisplay.css'\n\ntype MyProps = {\n  style: React.CSSProperties\n}\n\nexport default function TextDisplay(props: React.PropsWithChildren<MyProps>): JSX.Element {\n  return (\n    <div className=\"textDisplay\" style={props.style} role=\"textbox\">\n      {props.children}\n    </div>\n  )\n}\n// {/* <textarea autoFocus readOnly value={props.displayText}></textarea> */}","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { InlineIcon } from '@iconify/react';\nimport bxFontSize from '@iconify/icons-bx/bx-font-size';\n\nexport default function FontSizeToggle(props: { toggleFn: any }) {\n  return (\n    <Button onClick={props.toggleFn}>\n      <InlineIcon height=\"1rem\" icon={bxFontSize} />\n    </Button >)\n}","import React from \"react\"\nimport styled from \"styled-components\"\nimport { TrainingMode } from \"../defaultState\"\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row\n`\nconst BigStat = styled.h1`\n  color: ${props => props.color};\n  height: 100%;\n  line-height: 100%;\n  margin-right: 0.5rem;\n  padding: 0;\n`\n// const WPM = styled.h1`color: var(--mistake)`\nconst SmallStack = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: end;\n  text-align: right;\n  margin: 0;\n  margin-right: 0.5rem;\n  padding: 0;\n`\nconst SmallStackLabel = styled.p`\n  margin: 0;\n`\nconst Avg = styled.small`\n  color: var(--text-secondary);\n`\n\ninterface MyProps {\n  mode: TrainingMode\n  wordsPerMinute: number\n  wordsPerMinuteAverage: number\n  successRate: number\n  successRateAverage: number\n  guidedLevelIndex: number\n  levelDescription: string\n  changeLevel: (lvl: number) => void\n}\n\nconst QuickStats: React.FC<MyProps> = props => {\n  return (\n    <Wrapper>\n      <BigStat className=\"display-3\" color={\"var(--correct)\"}>\n        {props.wordsPerMinute}\n      </BigStat>\n      <SmallStack>\n        <SmallStackLabel>wpm</SmallStackLabel>\n        <Avg>avg: {props.wordsPerMinuteAverage}</Avg>\n      </SmallStack>\n      <BigStat className=\"display-3\" color={\"var(--mistake)\"}>\n        {props.successRate}\n      </BigStat>\n      <SmallStack>\n        <SmallStackLabel> % correct</SmallStackLabel>\n        <Avg>avg: {props.successRateAverage}</Avg>\n      </SmallStack>\n      {props.mode !== TrainingMode.GUIDED || (\n        <div style={{marginLeft: \"1rem\", display: 'flex', flexDirection: 'row', overflow: 'hidden'}}>\n          <BigStat style={{ width: \"4.5rem\", textAlign: \"left\"}} className=\"display-3\">{props.guidedLevelIndex as number + 1}</BigStat>\n          <div style={{ marginRight: \"0.5rem\", display: 'flex', flexDirection: 'column'}}>\n            <div style={{fontSize: '1.5rem', userSelect: 'none', fontFamily: 'sans-serif'}} onClick={() => props.changeLevel(props.guidedLevelIndex + 1)}>↑</div>\n            <div style={{fontSize: '1.5rem', userSelect: 'none', fontFamily: 'sans-serif'}} onClick={() => props.changeLevel(props.guidedLevelIndex - 1)}>↓</div>\n          </div>\n        </div>\n      )}\n    </Wrapper>\n  )\n}\n\nexport default QuickStats\n","import React from \"react\"\nimport './Toolbar.css'\n\nexport default function Toolbar(props: { stats: JSX.Element, buttons: JSX.Element }): JSX.Element {\n  return (\n    <nav className=\"toolbar\">\n      <div key=\"stats\" className='stats'>{props.stats}</div>\n      <div key=\"buttons\" className='settingsBtnGrp'>{props.buttons}</div>\n    </nav>\n  )\n}\n","import React from \"react\"\nimport { CourseLevel } from \"../assets/courses/Courses\"\nimport { KeyCode } from \"../core/KeyCode\"\nimport {\n  GuidedModeStringGenerator,\n  PracticeModeStringGenerator,\n  CodeModeStringGenerator,\n  TrainingStringGenerator,\n} from \"../core/TrainingStringGenerator/TrainingStringGenerator\"\nimport { Timer } from \"../utils/Timer\"\nimport { themes } from \"../assets/themes\"\nimport defaultState, { inactivityDelay, TrainingMode, FontSizes, MachineState, State } from \"./defaultState\"\n\n// CHILDREN\nimport { Container, Button, ButtonGroup } from \"react-bootstrap\"\nimport FormattedText from \"./FormattedText/FormattedText\"\nimport VirtualKeyboard from \"./VirtualKeyboard/VirtualKeyboard\"\nimport ModeSelectorModal from \"./Modals/ModeSelectorModal/ModeSelectorModal\"\nimport SettingsModal from \"./Modals/SettingsModal/SettingsModal\"\nimport TextDisplay from \"./TextDisplay/TextDisplay\"\nimport FontSizeToggle from \"./Toolbar/FontSizeToggle\"\nimport QuickStats from \"./Toolbar/QuickStats\"\nimport Toolbar from \"./Toolbar/Toolbar\"\nimport Keyboard from \"../core/Keyboard\"\nimport { localStorageAvailable } from \"../utils/utils\"\n\nexport class TypeTrainer extends React.Component<{}, State> {\n  sessionTimer = Timer()\n  inactivityTimer = 0\n  localStorage: Storage | undefined\n  constructor(props: any) {\n    super(props)\n    this.localStorage = undefined\n    this.state = this.initWith(defaultState)\n    console.table(this.state.uiTheme === 'light', 'light', this.state.uiTheme)\n    this.routeEvent = this.routeEvent.bind(this)\n  }\n\n  componentDidMount(): void {\n    document.addEventListener(\"keydown\", this.routeEvent)\n    document.addEventListener(\"keyup\", this.routeEvent)\n    document.addEventListener(\"blur\", this.routeEvent)\n    this.prepareNewSession()\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener(\"keydown\", this.routeEvent)\n    document.removeEventListener(\"keyup\", this.routeEvent)\n    document.removeEventListener(\"blur\", this.routeEvent)\n  }\n\n  routeEvent(event: Event): void {\n    const machineState = this.state.machineState\n    switch (event.type) {\n      case \"keydown\":\n        switch (machineState) {\n          case \"TRAINING\":\n          case \"READY\":\n            this.handleKeyDown(event as KeyboardEvent)\n            this.resetInactivityTimer()\n            break\n          case \"PAUSED\":\n            this.unPauseSession(event)\n            break\n          case \"SETTINGS\":\n          default:\n            break\n        }\n        break\n      case \"keyup\":\n        this.handleKeyUp(event as KeyboardEvent)\n        break\n      case \"blur\":\n        this.pauseSession()\n        break\n      default:\n        break\n    }\n  }\n  initWith(state: State): State {\n    // localStorage values if they exist\n    let localState: { [prop: string]: any } = {}\n    if (localStorageAvailable()) {\n      this.localStorage = window.localStorage\n      for (const propName of Object.keys(state)) {\n        const storageItem = this.localStorage.getItem(propName)\n        if (storageItem != null) {\n          localState[propName] = this.decodeStorageItem(storageItem)\n        } else {\n          localState[propName] = state[propName]\n        }\n      }\n      return { ...state, ...localState }\n    } else {\n      return state\n    }\n    // then prepare session\n  }\n\n  setLocalStorage(state: { [prop: string]: any }) {\n    if (this.localStorage == null) return\n    for (const [prop, value] of Object.entries(state)) {\n      const encoded = this.encodeStorageItem(value)\n      this.localStorage.setItem(prop, encoded)\n    }\n  }\n\n  encodeStorageItem(value: any): string {\n    let str: string\n    switch(typeof value) {\n      case 'object':\n        str = JSON.stringify(value)\n        break\n      default:\n        str = String(value)\n    }\n    return typeof value + \"$$$\" + str\n\n  }\n\n  decodeStorageItem(item: string): any {\n    const delimiter = item.indexOf(\"$$$\")\n    if (delimiter === -1) throw new SyntaxError('Storage item is missing \"$$$\" type delimiter.')\n    const type = item.slice(0, delimiter)\n    const value = item.slice(delimiter + 3)\n    console.log(item, value, type)\n    switch (type) {\n      case \"string\":\n        return value\n      case \"number\":\n        return value.indexOf(\".\") === -1 ? parseInt(value) : parseFloat(value)\n      case \"boolean\":\n        return value === 'true' ? true : false\n      case \"undefined\":\n        return undefined\n      case \"object\":\n      default:\n        return JSON.parse(value)\n    }\n  }\n\n  startInactivityTimer(): number {\n    return setTimeout(() => this.routeEvent(new Event(\"blur\")), inactivityDelay)\n  }\n\n  private resetInactivityTimer(): void {\n    clearTimeout(this.inactivityTimer)\n    this.inactivityTimer = this.startInactivityTimer()\n  }\n\n  handleKeyDown(event: KeyboardEvent): void {\n    event.preventDefault()\n    const state = { ...this.state }\n    // Reject input\n    if (!TypeTrainer.shouldKeepKeyDownEvent(event, state)) {\n      return\n    }\n    state.currentUserPressedKeys.add(event.code)\n    // console.log(\"code: \", event.code, \"key: \", event.key)\n    // Validate\n    if (Keyboard.keyCodeisCharKey(event.code)) {\n      if (TypeTrainer.isCorrectCharPressed(state, event)) {\n        TypeTrainer.goToNextChar(state)\n        if (TypeTrainer.isEOF(state)) {\n          this.endSession()\n          return\n        }\n      } else {\n        state.mistakeCharIndices.add(state.cursor)\n      }\n    }\n\n    // Update state\n    this.setState(state, () => {\n      if (this.state.machineState === \"READY\") {\n        this.startSession()\n      }\n    })\n  }\n\n  setModeModalShow(value: boolean): void {\n    this.setState({ uiModeSelectShow: value }, () => {\n      if (value) this.pauseSession(\"SETTINGS\")\n    })\n  }\n\n  setSettingsModalShow(value: boolean): void {\n    this.setState({ uiSettingsModalShow: value }, () => {\n      if (value) this.pauseSession(\"SETTINGS\")\n    })\n  }\n\n  setTrainingMode(mode: TrainingMode = this.state.trainingMode): void {\n    this.prepareNewSession({ trainingMode: mode, machineState: \"INIT\" }, () =>\n      this.setLocalStorage({ trainingMode: mode })\n    )\n  }\n\n  private static isEOF(state: State): boolean {\n    return state.cursor === state.trainingString.length\n  }\n\n  private static goToNextChar(state: State): void {\n    state.cursor += 1\n  }\n\n  private static isCorrectCharPressed(state: State, event: KeyboardEvent): boolean {\n    if (event.key === \"Enter\") return state.trainingString[state.cursor] === \"\\n\"\n    if (event.key === \"Tab\") return state.trainingString[state.cursor] === \"\\t\"\n\n    return state.trainingString[state.cursor] === event.key\n  }\n\n  private static shouldKeepKeyDownEvent(event: KeyboardEvent, state: State): boolean {\n    return !event.repeat && !state.currentUserPressedKeys.has(event.code)\n  }\n\n  handleKeyUp(event: KeyboardEvent): void {\n    event.preventDefault()\n    const pressed = this.state.currentUserPressedKeys\n    pressed.delete(event.code)\n    this.setState({ currentUserPressedKeys: pressed })\n  }\n\n  logMachineState(): void {\n    console.info(this.state.machineState)\n  }\n\n  startSession(): void {\n    this.sessionTimer.start()\n    this.setState({ machineState: \"TRAINING\" }, () => this.logMachineState())\n  }\n\n  pauseSession(state: MachineState = \"PAUSED\"): void {\n    if (this.sessionTimer != null) this.sessionTimer.pause()\n    this.setState({ currentUserPressedKeys: new Set(), machineState: state }, () => this.logMachineState())\n  }\n\n  unPauseSession(event: Event): void {\n    this.sessionTimer.unPause()\n    this.setState({ machineState: \"TRAINING\" }, () => {\n      this.logMachineState()\n      this.routeEvent(event)\n    })\n  }\n\n  prepareNewSession(newState: any = {}, after?: () => void): void {\n    const draftState = { ...this.state, ...newState }\n    if (draftState.machineState === \"INIT\" || draftState.machineState === \"SETTINGS\") {\n      draftState.trainingStringGenerator = this.newStringGenerator(draftState)\n      draftState.trainingString = draftState.trainingStringGenerator.generate(draftState)\n    } else {\n      draftState.trainingString = this.state.trainingStringGenerator.generate(draftState)\n    }\n\n    draftState.cursor = 0\n    draftState.mistakeCharIndices = new Set()\n    draftState.currentActiveKeyCodes = this.getCurrentActiveKeyCodes(draftState)\n    this.setState(\n      state => ({ ...state, ...draftState, machineState: \"READY\" }),\n      () => {\n        if (after != null) after()\n        this.logMachineState()\n      }\n    )\n  }\n\n  endSession(): void {\n    const totalSessions = this.state.totalSessions + 1\n\n    const wordsPerMinute = this.wordsPerMinute()\n    const wordsPerMinuteAverage = Math.round(\n      (this.state.wordsPerMinuteAverage * this.state.totalSessions + wordsPerMinute) / totalSessions\n    )\n\n    const successRate = Math.round(100 * (1 - this.state.mistakeCharIndices.size / this.state.trainingString.length))\n    const successRateAverage = Math.round(\n      (this.state.successRate * this.state.totalSessions + successRate) / totalSessions\n    )\n\n    const guidedLevelIndex =\n      this.state.trainingMode === TrainingMode.GUIDED ? this.nextLevelIndex(successRate) : this.state.guidedLevelIndex\n\n    const draftState = {\n      totalSessions,\n      wordsPerMinute,\n      wordsPerMinuteAverage,\n      successRate,\n      successRateAverage,\n      guidedLevelIndex,\n    }\n    this.setState({ ...draftState }, () =>\n      this.prepareNewSession({}, () =>\n        this.setLocalStorage({ totalSessions, wordsPerMinuteAverage, successRateAverage, guidedLevelIndex })\n      )\n    )\n  }\n\n  nextLevelIndex(successRate: number) {\n    const currentLvl = this.state.guidedLevelIndex\n    if (successRate >= 97 && currentLvl < this.state.guidedCourseLevels.length - 1) {\n      return currentLvl + 1\n    } else if (successRate <= 50 && currentLvl > 0) {\n      return currentLvl - 1\n    } else {\n      return currentLvl\n    }\n  }\n\n  private wordsPerMinute(): number {\n    const minutes = this.sessionTimer.getTimeElapsed() / 1000 / 60\n    const conventionalWordLength = 5\n    const sentenceLength = this.state.trainingString.length\n    const words = sentenceLength / conventionalWordLength\n    if (words < 1 && minutes < 1 / 60) return 40 // sloppy patch to avoid ridiculous values\n    const wpm = Math.round(words / minutes)\n    return wpm\n  }\n\n  private newStringGenerator(state: any): TrainingStringGenerator {\n    const mode = state.trainingMode || this.state.trainingMode\n    let generator: TrainingStringGenerator\n    switch (mode) {\n      case TrainingMode.GUIDED:\n        generator = new GuidedModeStringGenerator(\n          this.state.keyboard,\n          this.state.language,\n          this.state.guidedCourseLevels\n        )\n        break\n      case TrainingMode.PRACTICE:\n        generator = new PracticeModeStringGenerator(\n          this.state.language,\n          state.practiceSourceText || this.state.practiceSourceText\n        )\n        break\n      case TrainingMode.CODE:\n        generator = new CodeModeStringGenerator(state.codeSourceText || this.state.codeSourceText)\n        break\n      default:\n        generator = this.state.trainingStringGenerator\n        break\n    }\n    return generator\n  }\n\n  private getCurrentLevel(): CourseLevel {\n    // return final level (full keyboard) if lvl is undefined\n    return this.state.guidedCourseLevels[this.state.guidedLevelIndex]\n  }\n\n  toggleTheme(): void {\n    const uiTheme = this.state.uiTheme === \"light\" ? \"dark\" : \"light\"\n    this.setState({ uiTheme }, () => this.setLocalStorage({ uiTheme }))\n  }\n\n  toggleFontSize(): void {\n    const trainingStringFontSize = (this.state.trainingStringFontSize + 1) % FontSizes.length\n    this.setState({ trainingStringFontSize }, () => this.setLocalStorage({ trainingStringFontSize }))\n  }\n\n  toggleWhiteSpaceSymbols(): void {\n    const uiShowWhiteSpaceSymbols = !this.state.uiShowWhiteSpaceSymbols\n    this.setState({ uiShowWhiteSpaceSymbols }, () => this.setLocalStorage({ uiShowWhiteSpaceSymbols }))\n  }\n\n  getCurrentActiveKeyCodes(state: any = {}): KeyCode[] {\n    const draftState: State = { ...this.state, ...state }\n\n    // NEW APPROACH: base active keys on current training string\n    const keyCodes: KeyCode[] = draftState.trainingString\n      .split(\"\")\n      .map(glyph => draftState.language.characterSet.mapGlyphToKeyCode(glyph))\n      .reduce((arr: KeyCode[], kc) => (arr.includes(kc) ? arr : arr.concat(kc)), [])\n    return keyCodes\n\n    // OLD APPROACH: inferring active keys from current level, was too complicated\n    // const globalUsedKeyCodes = draftState.language.uniqueKeyCodes\n    // if (draftState.trainingMode === TrainingMode.GUIDED) {\n    // const noKeyOnlyOfType = (type: CharacterType) => (code: KeyCode): boolean =>\n    // draftState.language.characterSet.filterByCode(code).every(ch => ch.type !== type)\n    // const keyboard = draftState.keyboard\n    // const { keyBoardRows: rows, hand, fingers } = this.getCurrentLevel()\n    // let active: KeyCode[] = rows\n    //   .reduce((arr: KeyCode[], row) => arr.concat(keyboard.keyCodeLayout[row]), [])\n    //   .filter(code => globalUsedKeyCodes.includes(code))\n    //   .filter(code => hand === Hand.ANY || hand === keyboard.fingerMap[code].hand)\n    //   .filter(code => fingers[0] === Finger.ANY || fingers.includes(keyboard.fingerMap[code].finger))\n    //   .filter(noKeyOnlyOfType(\"WHITESPACE\"))\n\n    // if (!draftState.guidedHasPunctuation) {\n    //   active = active.filter(noKeyOnlyOfType(\"PUNCTUATION\"))\n    // } else {\n    //   const punct = CharacterSet.uniqueKeyCodes(draftState.language.characterSet.punctSet)\n    //   for (let p of punct) {\n    //     if (!active.includes(p)) active.push(p)\n    //   }\n    // }\n    // if (!draftState.guidedHasNumbers) {\n    //   active = active.filter(noKeyOnlyOfType(\"NUMBER\"))\n    // } else {\n    //   const nums = CharacterSet.uniqueKeyCodes(draftState.language.characterSet.numberSet)\n    //   for (let n of nums) {\n    //     if (!active.includes(n)) active.push(n)\n    //   }\n    // }\n    // if (!draftState.guidedHasSpecials) {\n    //   active = active.filter(noKeyOnlyOfType(\"SPECIAL\"))\n    // } else {\n    //   const spec = CharacterSet.uniqueKeyCodes(draftState.language.characterSet.specialSet)\n    //   for (let s of spec) {\n    //     if (!active.includes(s)) active.push(s)\n    //   }\n    // }\n    // return active\n    // } else {\n    //   return globalUsedKeyCodes\n    // }\n  }\n\n  applyUserSettings(settings: any) {\n   /*  const { \n      guidedWordLengthMin,\n      guidedWordLengthMax,\n      guidedNumWords,\n      guidedHasCaps,\n      guidedHasPunctuation,\n      guidedHasNumbers,\n      guidedHasSpecials,\n      guidedLikelihoodModified,\n      practiceSourceText,\n      codeSourceText,\n      codeLines\n    } = settings */\n    this.prepareNewSession({ ...settings }, () => this.setLocalStorage(settings))\n  }\n\n  setNewLevel(lvl: number) {\n    let level: number\n    if (lvl < 0) {\n      level = this.state.guidedCourseLevels.length - 1\n    } else if (lvl > this.state.guidedCourseLevels.length - 1) {\n      level = 0\n    } else {\n      level = lvl\n    }\n\n    this.prepareNewSession({ guidedLevelIndex: level }, () => this.setLocalStorage({ guidedLevelIndex: level }))\n  }\n\n  render(): JSX.Element {\n    const theme = this.state.uiTheme === \"light\" ? themes.light : themes.dark\n    return (\n        <div>\n        <ModeSelectorModal\n          show={this.state.uiModeSelectShow}\n          onHide={() => this.setModeModalShow(false)}\n          settrainingmode={(mode: TrainingMode): void => this.setTrainingMode(mode)}\n        ></ModeSelectorModal>\n        <SettingsModal \n          show={this.state.uiSettingsModalShow}\n          onHide={() => this.setSettingsModalShow(false)}\n          mode={this.state.trainingMode}\n          language={this.state.language}\n          guidedWordLengthMin={this.state.guidedWordLengthMin}\n          guidedWordLengthMax={this.state.guidedWordLengthMax}\n          guidedNumWords={this.state.guidedNumWords}\n          guidedHasCaps={this.state.guidedHasCaps}\n          guidedHasPunctuation={this.state.guidedHasPunctuation}\n          guidedHasNumbers={this.state.guidedHasNumbers}\n          guidedHasSpecials={this.state.guidedHasSpecials}\n          guidedLikelihoodModified={this.state.guidedLikelihoodModified}\n          practiceSourceText={this.state.practiceSourceText}\n          codeSourceText={this.state.codeSourceText}\n          codeLines={this.state.codeLines}\n          onSubmitChanges={settings => this.applyUserSettings(settings)}\n        ></SettingsModal>\n        <Container fluid className=\"App\" style={theme}>\n          <Toolbar\n            stats={\n              <QuickStats\n                key=\"quickStats\"\n                {...this.state}\n                mode={this.state.trainingMode}\n                levelDescription={this.getCurrentLevel().description}\n                changeLevel={lvl => this.setNewLevel(lvl)}\n              />\n            }\n            buttons={\n              <ButtonGroup aria-label=\"App settings\">\n                <Button key=\"openModeSelectModalBtn\" onClick={() => this.setModeModalShow(true)}>\n                  {this.state.trainingMode}\n                </Button>\n                <Button key=\"openSettingsModalBtn\" onClick={() => this.setSettingsModalShow(true)}>\n                  Settings\n                </Button>\n                <FontSizeToggle key={\"fontSelect\"} toggleFn={(): void => this.toggleFontSize()} />\n                <Button\n                  key=\"uiShowWhiteSpaceSymbols\"\n                  onClick={() => this.toggleWhiteSpaceSymbols()}\n                  dangerouslySetInnerHTML={\n                    this.state.uiShowWhiteSpaceSymbols ? { __html: \"<strike>&para;</strike>\" } : { __html: \"&para;\" }\n                  }\n                ></Button>\n                <Button key=\"toggleTheme\" onClick={() => this.toggleTheme()}>\n                  {this.state.uiTheme === \"dark\" ? \"🌞\" : \"🌛\"}\n                </Button>\n              </ButtonGroup>\n            }\n          />\n          <Container>\n            <TextDisplay style={{ fontSize: FontSizes[this.state.trainingStringFontSize] }}>\n              <FormattedText\n                greyed={this.state.machineState === \"PAUSED\"}\n                mode={this.state.trainingMode}\n                cursor={this.state.cursor}\n                trainingString={this.state.trainingString}\n                mistakeCharIndices={this.state.mistakeCharIndices}\n                uiShowWhiteSpaceSymbols={this.state.uiShowWhiteSpaceSymbols}\n              />\n            </TextDisplay>\n\n            <VirtualKeyboard\n              layout={this.state.keyboard}\n              pressed={this.state.currentUserPressedKeys}\n              active={this.state.currentActiveKeyCodes}\n              currentKey={this.state.language.characterSet.mapGlyphToKeyCode(\n                this.state.trainingString[this.state.cursor]\n              )}\n            ></VirtualKeyboard>\n          </Container>\n        </Container>\n        </div>\n    )\n  }\n}\n","\nexport function Timer() {\n  let paused: boolean;\n  let startMark: number = Date.now();\n  let pauseMark: number;\n  let pausedLength: number = 0;\n  return {\n    start: () => {\n      startMark = Date.now();\n      paused = false;\n      pauseMark = 0;\n      pausedLength = 0;\n    },\n    pause: () => {\n      if (!paused) {\n        paused = true;\n        pauseMark = Date.now();\n      }\n    },\n    unPause: () => {\n      if (paused) {\n        paused = false;\n        pausedLength += Date.now() - pauseMark;\n      }\n    },\n    getTimeElapsed: () => {\n      let total = Date.now() - (startMark + pausedLength);\n      return total;\n    },\n  };\n}\n","export const setNestedProp = (obj: {[key: string]: any} = {}, [first, ...rest]: string[] , value: any): any => {\n    console.log()\n    return ({ ...obj, [first]: rest.length ? setNestedProp(obj[first], rest, value) : value })\n  }\n\nexport const localStorageAvailable = () => {\n  var storage\n  try {\n    storage = window.localStorage\n    var x = \"__storage_test__\"\n    storage.setItem(x, x)\n    storage.removeItem(x)\n    return true\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    )\n  }\n}","import React from \"react\"\nimport \"./App.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { TypeTrainer } from \"./components/TypeTrainer\"\n\nfunction App(): JSX.Element {\n  return <TypeTrainer />\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}